// user-manager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–±–µ–∑ ES6 –º–æ–¥—É–ª–µ–π)

/* === –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø === */
let currentMode = 'user'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
let currentUser = '';

/* === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê–ú–ò === */
function setMode(mode) {
    currentMode = mode;
    
    // deadlineWarning logic removed
    const userSelector = document.getElementById('userSelector');
    const myScheduleBtn = document.getElementById('myScheduleBtn');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const bigGreeting = document.getElementById('bigGreeting');
    
    if (mode === 'admin') {
        // –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º
        if (userSelector) userSelector.style.display = 'block'; // –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
        if (myScheduleBtn) myScheduleBtn.style.display = 'none';
        if (progressBar) progressBar.style.display = 'none';
        if (progressText) progressText.style.display = 'none';
        if (bigGreeting) bigGreeting.style.display = 'none'; // –ü—Ä—è—á–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º–µ
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
        if (userSelector) userSelector.style.display = 'none'; // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä—è—á–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        if (myScheduleBtn) myScheduleBtn.style.display = 'block';
        if (progressBar) progressBar.style.display = 'block';
        if (progressText) progressText.style.display = 'block';
        if (bigGreeting) bigGreeting.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    }
    
    updateMenu();
    updateView();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    window.currentMode = currentMode;
}
function setCurrentUser(userName) {
    console.log('üîß setCurrentUser –≤—ã–∑–≤–∞–Ω —Å:', userName);
    
    // –ò–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (currentUser === userName) {
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', userName);
        return; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    }
    
    currentUser = userName;
    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω currentUser:', currentUser);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
    const userSelect = document.getElementById('currentUser');
    if (userSelect && userSelect.value !== userName) {
        userSelect.value = userName;
        console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    window.currentUser = currentUser;
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ù–ê–ü–†–Ø–ú–£–Æ, –∞ –Ω–µ —á–µ—Ä–µ–∑ updateView
    if (typeof renderSchedule === 'function') {
        renderSchedule();
        console.log('üé® –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω–æ');
    }
    
    if (typeof updateProgress === 'function') {
        updateProgress();
        console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º setCurrentUser –≥–ª–æ–±–∞–ª—å–Ω–æ
window.setCurrentUser = setCurrentUser;

/* === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê === */
function updateView() {
    if (currentMode === 'user') {
        const userSelectValue = document.getElementById('currentUser')?.value || '';
        
        // –ò–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º currentUser –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –≤—ã–∑–æ–≤–∞ setCurrentUser
        if (userSelectValue !== currentUser) {
            currentUser = userSelectValue;
            window.currentUser = currentUser;
        }
    }
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    renderSchedule();
    updateProgress();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±—ã –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    setTimeout(() => {
        Object.keys(schedule).forEach(day => {
            schedule[day].forEach(session => {
                const sessionKey = `${day}_${session.time}`;
                updateSessionTabs(sessionKey);
            });
        });
    }, 100);
}

function updateMenu() {
    const menuItems = document.getElementById('menuItems');
    if (!menuItems) return;
    
    let html = '';

    // –°–≤–∏—Ç—á–µ—Ä –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ (iPhone-style)
    html += `
        <div class="menu-item" style="display: flex; align-items: center; gap: 12px;">
            <label class="toggle-switch">
                <input type="checkbox" id="offlineModeSwitch" onchange="toggleOfflineMode(this.checked)" />
                <span class="slider"></span>
                <span style="margin-left: 12px;">–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</span>
            </label>
        </div>
    `;

    if (currentMode === 'admin') {
        html += `
            <div class="menu-item" onclick="openStatsPopup(); closeMenu();">
                <span>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
            </div>
            <div class="menu-item" onclick="openSchedulePopup(); closeMenu();">
                <span>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</span>
            </div>
            <div class="menu-item" onclick="openDataEditPopup(); closeMenu();">
                <span>‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</span>
            </div>
            <div class="menu-item" onclick="openRolesInfoPopup(); closeMenu();">
                <span>‚ùì –û —à–∏—Ñ—Ç–∞—Ö</span>
            </div>
            <div class="menu-item" onclick="setMode('user'); closeMenu();">
                <span>üë§ –†–µ–∂–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞</span>
            </div>
        `;
    } else {
        html += `
            <div class="menu-item" onclick="openMySchedule(); closeMenu();">
                <span>üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</span>
            </div>
            <div class="menu-item" onclick="openFullSchedulePopup(); closeMenu();">
                <span>üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</span>
            </div>
            <div class="menu-item" onclick="openRolesInfoPopup(); closeMenu();">
                <span>‚ùì –û —à–∏—Ñ—Ç–∞—Ö</span>
            </div>
        `;
        // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —Ä–µ–∂–∏–º
        if (!window.telegramUtils?.telegramUser) {
            html += `
                <div class="menu-item" onclick="setMode('admin'); closeMenu();">
                    <span>üë®‚Äçüíº –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º</span>
                </div>
            `;
        }
    }

    menuItems.innerHTML = html;

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–∏—Ç—á–µ—Ä–∞ –ø–æ window.isOfflineMode
    setTimeout(() => {
        const offlineSwitch = document.getElementById('offlineModeSwitch');
        if (offlineSwitch) {
            offlineSwitch.checked = !!window.isOfflineMode;
        }
    }, 0);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
window.toggleOfflineMode = function(isOn) {
    if (isOn) {
        // –í–∫–ª—é—á–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–ª–µ–µ)
        if (window.enableOfflineMode) window.enableOfflineMode();
    } else {
        // –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–ª–µ–µ)
        if (window.disableOfflineMode) window.disableOfflineMode();
    }
};

function updateProgress() {
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const progressFill = document.getElementById('progressFill');
    // deadlineWarning logic removed
    
    if (currentMode !== 'user' || !currentUser || !progressBar || !progressText || !progressFill) {
        if (progressBar) progressBar.style.display = 'none';
        if (progressText) progressText.style.display = 'none';
        return;
    }
    
    let userShifts = 0;
    Object.values(assignments).forEach(session => {
        Object.values(session).forEach(user => {
            if (user === currentUser) {
                userShifts++;
            }
        });
    });
    
    const minShifts = 8; // –ú–∏–Ω–∏–º—É–º —à–∏—Ñ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const progress = Math.min((userShifts / minShifts) * 100, 100);
    
    progressFill.style.width = `${progress}%`;
    
    if (progress >= 100) {
        progressText.textContent = '‚úÖ –í—Å–µ —à–∏—Ñ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!';
        setTimeout(() => {
            if (progressBar) progressBar.style.display = 'none';
            if (progressText) progressText.style.display = 'none';
        }, 3000);
    } else {
        progressText.textContent = `${userShifts}/${minShifts} —à–∏—Ñ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ`;
    }
}

/* === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô === */
function initializeParticipantsSelector() {
    const userSelect = document.getElementById('currentUser');
    if (!userSelect) return;
    
    userSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</option>';
    participants.forEach(participant => {
        const option = document.createElement('option');
        option.value = participant.name;
        option.textContent = `${participant.name} (${participant.telegram})`;
        userSelect.appendChild(option);
    });
}

function initializeTelegramUser(userName) {
    const bigGreeting = document.getElementById('bigGreeting');
    const userSelector = document.getElementById('userSelector');
    
    if (bigGreeting) {
        bigGreeting.textContent = `–ü—Ä–∏–≤–µ—Ç, ${userName}!`;
        bigGreeting.style.display = 'block';
    }
    
    if (userSelector) {
        userSelector.style.display = 'none';
    }
    
    setCurrentUser(userName);
}

function determineUserMode(participant) {
    // –î–ª—è –ò–≥–æ—Ä—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ isAdmin –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    return participant.isAdmin === true ? 'admin' : 'user';
}

/* === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô === */
function initUserHandlers() {    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    window.addEventListener('dataLoaded', () => {
        initializeParticipantsSelector();
        updateView();
    });
}

/* === –ì–ï–¢–¢–ï–†–´ === */
function getCurrentUser() {
    return currentUser;
}

function getCurrentMode() {
    return currentMode;
}

function isCurrentUserAdmin() {
    if (!currentUser) return false;
    const participant = participants.find(p => p.name === currentUser);
    return participant?.isAdmin === true;
}

function getCurrentUserData() {
    if (!currentUser) return null;
    return participants.find(p => p.name === currentUser) || null;
}

/* === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò === */
function showBathInfo() {
    showNotification(`–ë–∞–Ω–Ω—ã–π –∫–µ–º–ø NEVESOMO\n\n–ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥—è—Ç –±–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –ø–∞—Ä–µ–Ω–∏–µ–º, –º–∞—Å—Å–∞–∂–µ–º –∏ –∑–∞–±–æ—Ç–æ–π –æ –≥–æ—Å—Ç—è—Ö.\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–æ–ª–µ–π.`);
}

// === –û–§–õ–ê–ô–ù-–†–ï–ñ–ò–ú ===
window.enableOfflineMode = async function() {
    if (window.isOfflineMode) return;
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressFill = document.getElementById('progressFill');
        if (progressBar) progressBar.style.display = '';
        if (progressText) progressText.style.display = '';
        if (progressFill) progressFill.style.width = '0%';
        if (progressText) progressText.textContent = '–°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞...';

        // –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        let percent = 0;
        if (progressFill) progressFill.style.width = '10%';
        const allData = await window.airtableService.getAllData();
        percent = 80;
        if (progressFill) progressFill.style.width = percent + '%';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('offlineData', JSON.stringify(allData));
        percent = 100;
        if (progressFill) progressFill.style.width = percent + '%';
        if (progressText) progressText.textContent = '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!';

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        window.isOfflineMode = true;
        showNotification('–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω!');

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        if (window.loadOfflineData) {
            await window.loadOfflineData();
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
        setTimeout(() => {
            if (progressBar) progressBar.style.display = 'none';
            if (progressText) progressText.style.display = 'none';
        }, 1500);
    } catch (e) {
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞');
        window.isOfflineMode = false;
    }
    // –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é (—á–µ–∫–±–æ–∫—Å)
    if (typeof updateMenu === 'function') updateMenu();
};

window.disableOfflineMode = function() {
    // –£–¥–∞–ª—è–µ–º offlineData
    localStorage.removeItem('offlineData');
    window.isOfflineMode = false;
    showNotification('–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω');
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable
    if (window.loadAirtableData) {
        window.loadAirtableData();
    }
    // –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é (—á–µ–∫–±–æ–∫—Å)
    if (typeof updateMenu === 'function') updateMenu();
};

// === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ offlineData ===
window.loadOfflineData = async function() {
    try {
        const offlineData = JSON.parse(localStorage.getItem('offlineData'));
        if (!offlineData) throw new Error('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ñ–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã—Ö');
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∫–∞–∫ –≤ data_manager.js)
        if (Array.isArray(offlineData.participants)) {
            window.participants = offlineData.participants;
        }
        if (Array.isArray(offlineData.roles)) {
            window.rolesInfo = {};
            offlineData.roles.forEach(role => {
                window.rolesInfo[role.name] = {
                    icon: role.icon || 'üî•',
                    description: role.description || '',
                    instructionUrl: role.instructionUrl || '',
                    category: role.category || 'other'
                };
            });
        }
        if (Array.isArray(offlineData.schedule)) {
            window.schedule = {};
            offlineData.schedule.forEach(session => {
                const dateKey = session.date;
                if (!window.schedule[dateKey]) window.schedule[dateKey] = [];
                window.schedule[dateKey].push({
                    time: session.startTime,
                    endTime: session.endTime,
                    sessionNum: session.sessionNumber,
                    status: session.status,
                    type: session.type,
                    availableRoles: session.availableRoles,
                    slotLink: session.slotLink || null
                });
            });
        }
        if (Array.isArray(offlineData.assignments)) {
            window.assignments = {};
            offlineData.assignments.forEach(assignment => {
                const sessionKey = `${assignment.slotDate}_${assignment.slotTime}`;
                if (!window.assignments[sessionKey]) window.assignments[sessionKey] = {};
                window.assignments[sessionKey][assignment.roleName] = assignment.participantName;
            });
        }
        if (offlineData.settings) {
            window.appSettings = offlineData.settings;
        }
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (typeof updateView === 'function') updateView();
        if (typeof updateMenu === 'function') updateMenu();
    } catch (e) {
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ñ–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã—Ö');
    }
};

console.log('üë§ User Manager –∑–∞–≥—Ä—É–∂–µ–Ω');
