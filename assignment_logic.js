// assignment-logic.js - –õ–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π (–±–µ–∑ ES6 –º–æ–¥—É–ª–µ–π)

let pendingAssignment = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

// –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
window.pendingAssignment = null;
window.currentPopupSession = null;
window.currentPopupRole = null;

if (typeof window.pendingAssignment === 'undefined') {
    window.pendingAssignment = null;
}
if (typeof window.currentPopupSession === 'undefined') {
    window.currentPopupSession = null; 
}
if (typeof window.currentPopupRole === 'undefined') {
    window.currentPopupRole = null;
}

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function syncGlobalState() {
    window.pendingAssignment = pendingAssignment;
    window.currentPopupSession = currentPopupSession;
    window.currentPopupRole = currentPopupRole;
}

/* === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–ô === */
function handleRoleSlotClick(sessionKey, role) {
    if (currentMode === 'admin') {
        openParticipantPopup(sessionKey, role);
    } else {
        const assignedUser = assignments[sessionKey][role];
        
        if (assignedUser === currentUser) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –Ω–∞ —Å–≤–æ–π —Å–ª–æ—Ç - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            openEditShiftPopup(sessionKey, role);
        } else if (assignedUser === null) {
            // –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            openBookShiftPopup(sessionKey, role);
        } else {
            showNotification('–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º');
        }
    }
}


function isSlotBlocked(sessionKey, roleToCheck) {
    if (currentMode !== 'user' || !currentUser) return false;
    
    const sessionTime = sessionKey.split('_')[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è
    for (const [checkSessionKey, sessionRoles] of Object.entries(assignments)) {
        const checkTime = checkSessionKey.split('_')[1];
        if (checkTime === sessionTime && checkSessionKey !== sessionKey) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–µ—Å—Å–∏—è—Ö –≤ —ç—Ç–æ –≤—Ä–µ–º—è
            for (const [role, assignedUser] of Object.entries(sessionRoles)) {
                if (assignedUser === currentUser) {
                    return true; // –ë–ª–æ–∫–∏—Ä—É–µ–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–Ω—è—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è
                }
            }
        }
    }
    
    return false;
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞—É–Ω–∂-—Ä–æ–ª–µ–π
function hasLoungeRole(userName) {
    if (!userName || !roleGroups.lounge) {
        return false;
    }
    
    for (const sessionRoles of Object.values(assignments)) {
        for (const [role, assignedUser] of Object.entries(sessionRoles)) {
            if (assignedUser === userName && roleGroups.lounge.roles.includes(role)) {
                return true;
            }
        }
    }
    return false;
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
function debugRoleAssignment(sessionKey, role) {
    console.log('üîç Debug —Ä–æ–ª–∏:', {
        sessionKey,
        role,
        currentUser,
        assignments: assignments[sessionKey],
        allRoles,
        roleGroups
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å –≤ allRoles
    if (!allRoles.includes(role)) {
        console.error(`‚ùå –†–æ–ª—å "${role}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ allRoles:`, allRoles);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å –≤ assignments –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    if (!assignments[sessionKey] || assignments[sessionKey][role] === undefined) {
        console.error(`‚ùå –†–æ–ª—å "${role}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ assignments –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionKey}`);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏:', Object.keys(assignments[sessionKey] || {}));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ä–æ–ª—å
    for (const [groupKey, group] of Object.entries(roleGroups)) {
        if (group.roles.includes(role)) {
            console.log(`‚úÖ –†–æ–ª—å "${role}" –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ "${group.name}"`);
            break;
        }
    }
}

async function toggleUserAssignment(sessionKey, role) {
    if (!currentUser) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        return;
    }
    
    const currentAssignment = assignments[sessionKey][role];
    const isBlocked = isSlotBlocked(sessionKey, role);
    
    if (isBlocked && currentAssignment !== currentUser) {
        showNotification('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–∞—è —Ä–æ–ª—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è!');
        return;
    }
    
    const [day, time] = sessionKey.split('_');
    
    if (currentAssignment === currentUser) {
        // –£–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        showConfirmation(
            '–£–¥–∞–ª–∏—Ç—å —à–∏—Ñ—Ç?',
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —à–∏—Ñ—Ç "${role}"?`,
            async () => {
                await removeUserAssignment(sessionKey, role);
            }
        );
    } else if (currentAssignment === null) {
        // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        pendingAssignment = { sessionKey, role, day, time };
        openCommentPopup();
    } else {
        showNotification('–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }
}

async function completeAssignment(comment = '') {
    if (window.isOfflineMode) {
        showNotification('–í –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å—å –Ω–∞ —à–∏—Ñ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!');
        window.pendingAssignment = null;
        return;
    }
    console.log('üöÄ completeAssignment –≤—ã–∑–≤–∞–Ω:', {
        comment,
        pendingAssignment: window.pendingAssignment,
        currentUser: window.currentUser || currentUser
    });
    
    if (!window.pendingAssignment) {
        console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏');
        return;
    }
    
    const { sessionKey, role, day, time } = window.pendingAssignment;
    const user = window.currentUser || currentUser;
    
    console.log('üìù –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:', { sessionKey, role, day, time, user, comment });
    
    if (!user) {
        console.error('‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        showNotification('–ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        window.pendingAssignment = null;
        return;
    }
    
    showLoader('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∏—Ñ—Ç–∞...');
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Airtable —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        await saveAssignmentToAirtable(user, role, day, time, comment);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ assignments
        assignments[sessionKey][role] = user;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ª–æ–∫–∞–ª—å–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (comment) {
            if (!window.assignmentComments) window.assignmentComments = {};
            if (!window.assignmentComments[sessionKey]) window.assignmentComments[sessionKey] = {};
            window.assignmentComments[sessionKey][role] = { comment };
        }
        
        renderSchedule();
        updateProgress();
        
        showNotification('–®–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        hideLoader();
        window.pendingAssignment = null;
    }
}

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –°–†–ê–ó–£
// window.completeAssignment = completeAssignment;

async function removeUserAssignment(sessionKey, role) {
    if (window.isOfflineMode) {
        showNotification('–í –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏–µ —à–∏—Ñ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!');
        return;
    }
    const [day, time] = sessionKey.split('_');
    const expandedSession = document.querySelector('.session.expanded')?.getAttribute('data-session');
    
    showLoader('–£–¥–∞–ª–µ–Ω–∏–µ —à–∏—Ñ—Ç–∞...');
    
    try {
        await removeAssignmentFromAirtable(currentUser, role, day, time);
        assignments[sessionKey][role] = null;
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if (window.assignmentComments?.[sessionKey]?.[role]) {
            delete window.assignmentComments[sessionKey][role];
        }
        
        renderSchedule();
        updateProgress();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é
        setTimeout(() => {
            if (expandedSession) {
                const element = document.querySelector(`[data-session="${expandedSession}"]`);
                if (element) {
                    element.classList.add('expanded');
                }
            }
        }, 50);
        
        showNotification('–®–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        hideLoader();
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function validateRolesData() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π:');
    console.log('allRoles:', allRoles);
    console.log('roleGroups:', roleGroups);
    console.log('assignments keys:', Object.keys(assignments));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–æ–ª–∏ –∏–∑ –≥—Ä—É–ø–ø –µ—Å—Ç—å –≤ allRoles
    Object.entries(roleGroups).forEach(([groupKey, group]) => {
        group.roles.forEach(role => {
            if (!allRoles.includes(role)) {
                console.error(`‚ùå –†–æ–ª—å "${role}" –∏–∑ –≥—Ä—É–ø–ø—ã "${group.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ allRoles`);
            }
        });
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
window.addEventListener('dataLoaded', () => {
    setTimeout(validateRolesData, 1000);
});

async function selectParticipant(participantName) {
    if (!currentPopupSession || !currentPopupRole) return;
    
    const role = currentPopupRole;
    const sessionKey = currentPopupSession;
    const [day, time] = sessionKey.split('_');
    const currentAssignment = assignments[sessionKey][role];
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¢–û–õ–¨–ö–û –û–î–ù–£ —Ä–∞—Å–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é (–∞–∫–∫–æ—Ä–¥–µ–æ–Ω)
    const expandedSession = document.querySelector('.session.expanded')?.getAttribute('data-session');
    
    showLoader('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...');
    
    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
        if (currentAssignment && currentAssignment !== participantName) {
            await removeAssignmentFromAirtable(currentAssignment, role, day, time);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫
        if (participantName) {
            await saveAssignmentToAirtable(participantName, role, day, time);
        }
        
        assignments[sessionKey][role] = participantName;
        
        renderSchedule();
        updateProgress();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É)
        setTimeout(() => {
            if (expandedSession) {
                const element = document.querySelector(`[data-session="${expandedSession}"]`);
                if (element) {
                    element.classList.add('expanded');
                }
            }
        }, 50);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        await reloadData();
        renderSchedule();
        updateProgress();
    } finally {
        hideLoader();
    }
    
    closeParticipantPopup();
}

async function autoFillSession(sessionKey) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é?')) {
        return;
    }
    
    const [day, time] = sessionKey.split('_');
    const session = schedule[day].find(s => s.time === time);
    const sessionAssignments = assignments[sessionKey];
    
    let sessionRoles = allRoles;
    if (session.roles) {
        sessionRoles = session.roles;
    }
    
    const emptyRoles = sessionRoles.filter(role => !sessionAssignments[role]);
    
    if (emptyRoles.length === 0) {
        showNotification('–í—Å–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!');
        return;
    }
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¢–û–õ–¨–ö–û –û–î–ù–£ —Ä–∞—Å–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é (–∞–∫–∫–æ—Ä–¥–µ–æ–Ω)
    const expandedSession = document.querySelector('.session.expanded')?.getAttribute('data-session');
    
    showLoader('–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
    
    try {
        const userShiftCount = {};
        participants.forEach(p => userShiftCount[p.name] = 0);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        Object.values(assignments).forEach(sessionData => {
            Object.values(sessionData).forEach(user => {
                if (user && userShiftCount.hasOwnProperty(user)) {
                    userShiftCount[user]++;
                }
            });
        });
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏
        for (const role of emptyRoles) {
            const availableUsers = participants.filter(p => 
                !isUserBusyInSession(sessionKey, p.name) &&
                (role !== '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä' || p.bathExperience)
            );
            
            if (availableUsers.length > 0) {
                const minShifts = Math.min(...availableUsers.map(u => userShiftCount[u.name]));
                const leastBusyUsers = availableUsers.filter(u => userShiftCount[u.name] === minShifts);
                const selectedUser = leastBusyUsers[Math.floor(Math.random() * leastBusyUsers.length)];
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Airtable
                await saveAssignmentToAirtable(selectedUser.name, role, day, time);
                
                assignments[sessionKey][role] = selectedUser.name;
                userShiftCount[selectedUser.name]++;
            }
        }
        
        renderSchedule();
        updateProgress();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É)
        setTimeout(() => {
            if (expandedSession) {
                const element = document.querySelector(`[data-session="${expandedSession}"]`);
                if (element) {
                    element.classList.add('expanded');
                }
            }
        }, 50);
        
        showNotification('–°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        await reloadData();
        renderSchedule();
        updateProgress();
    } finally {
        hideLoader();
    }
}

/* === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–ü–ê–ü–ê–ú–ò === */
function openParticipantPopup(sessionKey, role) {
    currentPopupSession = sessionKey;
    currentPopupRole = role;
    
    const participantsList = document.getElementById('participantsList');
    const currentAssignment = assignments[sessionKey][role];
    
    const html = renderParticipantsList(currentAssignment);
    participantsList.innerHTML = html;
    document.getElementById('participantPopup').classList.add('show');
}

function closeParticipantPopup() {
    document.getElementById('participantPopup').classList.remove('show');
    currentPopupSession = null;
    currentPopupRole = null;
}

/* === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */
function showLoader(text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    let loader = document.getElementById('loadingOverlay');
    if (!loader) {
        loader = document.createElement('div');
        loader.id = 'loadingOverlay';
        loader.className = 'loading-overlay';
        loader.innerHTML = `
            <div style="text-align: center;">
                <div class="loading-spinner"></div>
                <div class="loading-text">${text}</div>
            </div>
        `;
        document.body.appendChild(loader);
    }
    loader.querySelector('.loading-text').textContent = text;
    loader.classList.add('show');
}

function hideLoader() {
    const loader = document.getElementById('loadingOverlay');
    if (loader) {
        loader.classList.remove('show');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
function getAssignmentData(sessionKey, role) {
    console.log('üìñ getAssignmentData –≤—ã–∑–≤–∞–Ω:', { sessionKey, role });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if (window.assignmentComments && 
        window.assignmentComments[sessionKey] && 
        window.assignmentComments[sessionKey][role]) {
        
        const data = window.assignmentComments[sessionKey][role];
        console.log('üí¨ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', data);
        return data;
    }
    
    console.log('üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π');
    return { comment: '' };
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function removeUserAssignment(sessionKey, role) {
    console.log('üóëÔ∏è removeUserAssignment –≤—ã–∑–≤–∞–Ω:', { sessionKey, role });
    
    const [day, time] = sessionKey.split('_');
    const expandedSession = document.querySelector('.session.expanded')?.getAttribute('data-session');
    const currentUserToRemove = window.currentUser || currentUser;
    
    console.log('üë§ –£–¥–∞–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserToRemove);
    
    showLoader('–£–¥–∞–ª–µ–Ω–∏–µ —à–∏—Ñ—Ç–∞...');
    
    try {
        // –£–¥–∞–ª—è–µ–º –∏–∑ Airtable
        console.log('üíæ –£–¥–∞–ª—è–µ–º –∏–∑ Airtable...');
        await removeAssignmentFromAirtable(currentUserToRemove, role, day, time);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö assignments
        assignments[sessionKey][role] = null;
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if (window.assignmentComments?.[sessionKey]?.[role]) {
            delete window.assignmentComments[sessionKey][role];
            console.log('üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω');
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        renderSchedule();
        updateProgress();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é
        setTimeout(() => {
            if (expandedSession) {
                const element = document.querySelector(`[data-session="${expandedSession}"]`);
                if (element) {
                    element.classList.add('expanded');
                }
            }
        }, 50);
        
        showNotification('–®–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        console.log('‚úÖ –®–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        hideLoader();
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function updateAssignmentComment(sessionKey, role, comment) {
    console.log('üí¨ updateAssignmentComment –≤—ã–∑–≤–∞–Ω:', { sessionKey, role, comment });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null/undefined
    if (!sessionKey || !role) {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { sessionKey, role });
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ç–∞');
        return;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ sessionKey —Å–æ–¥–µ—Ä–∂–∏—Ç '_'
    if (typeof sessionKey !== 'string' || !sessionKey.includes('_')) {
        console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç sessionKey:', sessionKey);
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        return;
    }
    
    const [day, time] = sessionKey.split('_');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ day –∏ time –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if (!day || !time) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è:', { day, time, sessionKey });
        showNotification('–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏');
        return;
    }
    
    const currentUserForComment = window.currentUser || currentUser;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!currentUserForComment) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        showNotification('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        return;
    }
    
    console.log('üë§ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUserForComment);
    console.log('üìÖ –î–µ–Ω—å –∏ –≤—Ä–µ–º—è:', { day, time });
    
    try {
        console.log('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ Airtable...');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        const assignments = await window.airtableService.getAssignments();
        const assignment = assignments.find(a => 
            a.participantName === currentUserForComment && 
            a.roleName === role && 
            a.slotDate === day && 
            a.slotTime === time
        );
        
        if (assignment) {
            await window.airtableService.updateAssignment(assignment.id, { Comment: comment });
            console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Airtable');
        } else {
            console.warn('‚ö†Ô∏è –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Airtable:', {
                participantName: currentUserForComment,
                roleName: role,
                slotDate: day,
                slotTime: time
            });
            showNotification('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ, –Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if (!window.assignmentComments) window.assignmentComments = {};
        if (!window.assignmentComments[sessionKey]) window.assignmentComments[sessionKey] = {};
        window.assignmentComments[sessionKey][role] = { comment };
        
        console.log('üíæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        renderSchedule();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.getAssignmentData = getAssignmentData;
window.removeUserAssignment = removeUserAssignment;
window.updateAssignmentComment = updateAssignmentComment;

console.log('‚öôÔ∏è Assignment Logic –∑–∞–≥—Ä—É–∂–µ–Ω');
