// main.js - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ ES6 –º–æ–¥—É–ª–µ–π)

/* === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï === */
let sessionFilters = {};

/* === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò === */
async function init() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NEVESOMO...');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É
        await showLoadingScreen();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable
        await loadAirtableData();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        initializeParticipantsSelector();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–µ—Å—Å–∏–π
        initSessionFilters();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
        const savedTheme = localStorage.getItem('theme') || 'light';
        setTheme(savedTheme);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
        startCountdown();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        initAllHandlers();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateMenu();
        renderSchedule();
        updateProgress();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É
        hideLoadingScreen();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showLoadingError();
    }
}

/* === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–ï–ô === */
function initSessionFilters() {
    sessionFilters = {};
    Object.keys(schedule).forEach(day => {
        schedule[day].forEach(session => {
            const sessionKey = `${day}_${session.time}`;
            sessionFilters[sessionKey] = 'all';
        });
    });
    
    // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.sessionFilters = sessionFilters;
}

function initAllHandlers() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    initUserHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø–∞–ø–æ–≤
    initPopupHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ—Å—Å–∏–π
    initSessionHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    initMenuHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–º
    initThemeHandlers();
}

function initSessionHandlers() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
    window.toggleSession = function(sessionKey) {
        const sessionElement = document.querySelector(`[data-session="${sessionKey}"]`);
        if (!sessionElement) return;
        
        const isCurrentlyExpanded = sessionElement.classList.contains('expanded');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏
        document.querySelectorAll('.session.expanded').forEach(session => {
            session.classList.remove('expanded');
        });
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ—ë
        // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç–æ–π (–ø–æ–≤–µ–¥–µ–Ω–∏–µ toggle)
        if (!isCurrentlyExpanded) {
            sessionElement.classList.add('expanded');
        }
    };
    
    window.setSessionFilter = function(sessionKey, filter) {
        sessionFilters[sessionKey] = filter;
        
        const sessionElement = document.querySelector(`[data-session="${sessionKey}"]`);
        if (sessionElement) {
            sessionElement.querySelectorAll('.session-tab').forEach(tab => tab.classList.remove('active'));
            const filterTab = sessionElement.querySelector(`[data-filter="${filter}"]`);
            if (filterTab) {
                filterTab.classList.add('active');
            }
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–æ–ª–∏ —Å–µ—Å—Å–∏–∏
        const container = document.getElementById(`roles-${sessionKey}`);
        if (container) {
            const html = renderSessionRoles(sessionKey, filter);
            container.innerHTML = html;
        }
        updateSessionTabs(sessionKey);
    };
}

function initMenuHandlers() {
    window.toggleMenu = function() {
        const menuOverlay = document.getElementById('menuOverlay');
        if (menuOverlay) {
            menuOverlay.classList.toggle('show');
        }
    };

    window.closeMenu = function() {
        const menuOverlay = document.getElementById('menuOverlay');
        if (menuOverlay) {
            menuOverlay.classList.remove('show');
        }
    };
}

function initThemeHandlers() {
    window.toggleTheme = function() {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        setTheme(newTheme);
    };
}

/* === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */
function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    
    const themeToggle = document.querySelector('.theme-toggle');
    if (themeToggle) {
        themeToggle.textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
    }
}

function startCountdown() {
    const deadline = new Date('2025-07-08T23:59:59');
    
    function updateCountdown() {
        const now = new Date();
        const timeLeft = deadline - now;
        
        const countdownElement = document.getElementById('countdown');
        if (!countdownElement) return;
        
        if (timeLeft > 0) {
            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            
            countdownElement.textContent = 
                `‚è∞ ${days}–¥ ${hours}—á ${minutes}–º ${seconds}—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞`;
        } else {
            countdownElement.textContent = 'üî¥ –î–ï–î–õ–ê–ô–ù –ò–°–¢–ï–ö!';
        }
    }
    
    updateCountdown();
    setInterval(updateCountdown, 1000);
}

function showErrorMessage(message) {
    const container = document.getElementById('schedule');
    if (container) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 2em; margin-bottom: 16px;">‚ùå</div>
                <div style="font-size: 1.2em; color: var(--error-color); margin-bottom: 16px;">
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                </div>
                <div style="color: var(--text-secondary); margin-bottom: 16px;">
                    ${message}
                </div>
                <button onclick="location.reload()" style="background: var(--accent-primary); color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer;">
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                </button>
            </div>
        `;
    }
}

/* === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM === */
window.addEventListener('dataLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    const telegramUser = window.telegramUtils?.telegramUser;
    if (telegramUser && participants.length > 0) {
        console.log('ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', telegramUser);
        
        // –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ Telegram ID –∏–ª–∏ username
        const match = participants.find(p => {
            const idOK = p.telegramId && p.telegramId.toString() === telegramUser.id.toString();
            const userOK = p.telegram && telegramUser.username && 
                         p.telegram.replace('@', '').toLowerCase() === telegramUser.username.toLowerCase();
            return idOK || userOK;
        });

        if (match) {
            console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:', match.name);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            initializeTelegramUser(match.name);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
            const userMode = determineUserMode(match);
            setMode(userMode);
            
           // console.log(`üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userMode}`);
        } else {
          //  console.log('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ');
        }
    }
});

/* === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */
// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
window.setMode = setMode;
window.updateView = updateView;
window.showBathInfo = showBathInfo;

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ø–∞–ø–æ–≤
window.openMySchedule = openMySchedule;
window.openStatsPopup = openStatsPopup;
window.openSchedulePopup = openSchedulePopup;
window.closeStatsPopup = closeStatsPopup;
window.closeSchedulePopup = closeSchedulePopup;
window.openRolesInfoPopup = openRolesInfoPopup;
window.closeRolesInfoPopup = closeRolesInfoPopup;
window.showRoleDetail = showRoleDetail;
window.closeRoleDetailPopup = closeRoleDetailPopup;
window.openDataEditPopup = openDataEditPopup;
window.shareSchedule = shareSchedule;
window.openUserScheduleFromStats = openUserScheduleFromStats;
window.openCommentPopup = openCommentPopup;
window.closeCommentPopup = closeCommentPopup;
window.skipComment = skipComment;
window.saveComment = saveComment;
window.showConfirmation = showConfirmation;
window.closeConfirmPopup = closeConfirmPopup;
window.showNotification = showNotification;
window.completeAssignment = completeAssignment;

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
window.handleRoleSlotClick = handleRoleSlotClick;
window.selectParticipant = selectParticipant;
window.autoFillSession = autoFillSession;
window.closeParticipantPopup = closeParticipantPopup;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
window.currentMode = currentMode;
window.currentUser = currentUser;

/* === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–°–¢–ê–í–ö–û–ô === */
async function showLoadingScreen() {
    const loadingScreen = document.getElementById('loadingScreen');
    const loadingLogo = document.querySelector('.loading-logo');
    const loadingContent = document.querySelector('.loading-content');
    const loadingText = document.getElementById('loadingText');
    
    if (!loadingScreen) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É
    loadingScreen.classList.remove('hidden');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ë–ª—é—Ä–∏–º –ª–æ–≥–æ—Ç–∏–ø –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    loadingLogo.classList.add('blurred');
    loadingContent.style.display = 'block';
    
    await new Promise(resolve => setTimeout(resolve, 500));
    loadingContent.classList.add('visible');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ–Ω—É —Ç–µ–∫—Å—Ç–æ–≤
    startLoadingTextAnimation(loadingText);
}

function startLoadingTextAnimation(textElement) {
    if (!textElement) return;
    
    const texts = [
        '–ì—Ä—É–∑–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...',
        '–ó–∞–≥—Ä—É–∂–∞–µ–º —à–∏—Ñ—Ç—ã...',
        '–¢—É–ø–∏–º...'
    ];
    
    let currentIndex = 0;
    
    const updateText = () => {
        if (textElement && currentIndex < texts.length) {
            textElement.textContent = texts[currentIndex];
            textElement.style.animation = 'none';
            setTimeout(() => {
                if (textElement) {
                    textElement.style.animation = 'fadeInText 0.5s ease';
                }
            }, 10);
            currentIndex++;
            
            if (currentIndex < texts.length) {
                setTimeout(updateText, 1000);
            } else {
                // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ "–¢—É–ø–∏–º..." –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å
                textElement.textContent = '–¢—É–ø–∏–º...';
            }
        }
    };
    
    updateText();
}

function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loadingScreen');
    if (loadingScreen) {
        loadingScreen.classList.add('hidden');
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 500–º—Å –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (loadingScreen && loadingScreen.parentNode) {
                loadingScreen.style.display = 'none';
            }
        }, 500);
    }
}

function showLoadingError() {
    const loadingText = document.getElementById('loadingText');
    const loadingError = document.getElementById('loadingError');
    const spinner = document.querySelector('.loading-spinner');
    
    if (loadingText) loadingText.style.display = 'none';
    if (spinner) spinner.style.display = 'none';
    if (loadingError) loadingError.style.display = 'block';
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    const tg = window.Telegram?.WebApp;
    if (tg) {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp...');
        tg.ready();
        tg.expand();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Å—Ç–∞–≤–∫—É —Å—Ä–∞–∑—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    init().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
        showLoadingError();
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç—É–ª—Ç–∏–ø–∞
window.showProgressTooltip = function(element, emptySlots) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—É–ª—Ç–∏–ø
    const existingTooltip = document.querySelector('.progress-tooltip');
    if (existingTooltip) {
        existingTooltip.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—É–ª—Ç–∏–ø
    const tooltip = document.createElement('div');
    tooltip.className = 'progress-tooltip';
    tooltip.textContent = `–û—Å—Ç–∞–ª–æ—Å—å ${emptySlots} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`;
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    const rect = element.getBoundingClientRect();
    tooltip.style.left = rect.left + (rect.width / 2) + 'px';
    tooltip.style.top = (rect.top - 40) + 'px';
    
    document.body.appendChild(tooltip);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        tooltip.remove();
    }, 3000);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ
    document.addEventListener('click', function removeTooltip() {
        tooltip.remove();
        document.removeEventListener('click', removeTooltip);
    });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç–∞–±–æ–≤
window.checkTabsScroll = function(sessionKey) {
    const wrapper = document.getElementById(`tabs-wrapper-${sessionKey}`);
    const tabs = wrapper?.querySelector('.session-tabs');
    
    if (!tabs) return;
    
    const isScrollable = tabs.scrollWidth > tabs.clientWidth;
    const isAtEnd = tabs.scrollLeft + tabs.clientWidth >= tabs.scrollWidth - 10;
    
    if (isScrollable && !isAtEnd) {
        wrapper.classList.add('scrollable');
    } else {
        wrapper.classList.remove('scrollable');
    }
};

// Touch swipe –¥–ª—è —Ç–∞–±–æ–≤ –∏ —Ä–æ–ª–µ–π
document.addEventListener('DOMContentLoaded', () => {
    // –í–∫–ª—é—á–∞–µ–º momentum scrolling –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    const scrollableElements = document.querySelectorAll('.session-tabs, .roles-grid-compact');
    
    scrollableElements.forEach(element => {
        let isDown = false;
        let startX;
        let scrollLeft;
        
        element.addEventListener('mousedown', (e) => {
            isDown = true;
            startX = e.pageX - element.offsetLeft;
            scrollLeft = element.scrollLeft;
        });
        
        element.addEventListener('mouseleave', () => {
            isDown = false;
        });
        
        element.addEventListener('mouseup', () => {
            isDown = false;
        });
        
        element.addEventListener('mousemove', (e) => {
            if (!isDown) return;
            e.preventDefault();
            const x = e.pageX - element.offsetLeft;
            const walk = (x - startX) * 2;
            element.scrollLeft = scrollLeft - walk;
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.addEventListener('error', (event) => {
    console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

console.log('üéØ Main.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
