// –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const participants = [
    { name: '–°–∞—à–∞ –ë–µ–∑—Ä—É–∫–æ–≤', telegram: '@Artbit17', bathExperience: false },
    { name: '–Æ—Ä–∞ –°—Ç—Ä–µ–ª–∫–æ–≤', telegram: '@nt3f5h', bathExperience: false },
    { name: '–õ—è–π—Å–∞–Ω –°–∞–Ω–∂–∞–ø–æ–≤–∞', telegram: '@ponysun', bathExperience: false },
    { name: '–ò–≤–∞–Ω –î—Ä–æ–∂–∂–∏–Ω', telegram: '@mpil5', bathExperience: true },
    { name: '–ú–∞—Ä—å—è–Ω–∞ –ë–∞–∂–∞–Ω', telegram: '@bazhanka', bathExperience: true },
    { name: '–î–∏–º–∞ –ö—É–¥—Ä—è—à–æ–≤', telegram: '@', bathExperience: false },
    { name: '–ê–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞', telegram: '@iadoreuall', bathExperience: false },
    { name: '–°—Ç–µ—Ñ–∞–Ω –ü—Ä–æ–∫–æ–ø–µ–Ω–∫–æ', telegram: '@steve_procore', bathExperience: false },
    { name: '–ö–∏—Ä—é—à–∞ –†—è–±–∫–æ–≤', telegram: '@brutsky', bathExperience: false },
    { name: '–ö–æ—Å—Ç—è –ù–æ–≤–∞–∫–æ–≤—Å–∫–∏–π', telegram: '@kostya_keper', bathExperience: false },
    { name: '–ö–∞—Ç—è –ê–≤–¥–µ–µ–≤–∞', telegram: '@e_avdeeva', bathExperience: false },
    { name: '–ò–≥–æ—Ä—å –ö–æ–Ω–æ–≤–∞–ª—å—á–∏–∫', telegram: '@konovalchik', bathExperience: false },
    { name: '–¢–∞–Ω—è –†–æ–∑–µ–Ω—Ü–≤–∏—Ç', telegram: '@captain_shadow', bathExperience: false },
    { name: '–£–ª—è –ë–µ–ª–∫–∞', telegram: '@reelsulya', bathExperience: false },
    { name: '–í–∞–Ω—è –ö—É—Å–∞–∫–∏–Ω', telegram: '@un1maf', bathExperience: false },
    { name: '–û–∫–µ–∞–Ω', telegram: '@Ocean_so_be_it', bathExperience: false },
    { name: '–°–µ—Ä—ë–∂–∞ –õ—É—á–∞–∫–∏–Ω', telegram: '@', bathExperience: true },
    { name: '–ú–∞—Ä–∏–Ω–∞ –ë–µ–ª—è–µ–≤–∞', telegram: '@', bathExperience: false },
    { name: '–ò–ª—å—è –ß–µ—Ä–µ–¥–Ω–∏–∫–æ–≤', telegram: '@ilya_ch', bathExperience: false },
    { name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–∏–∫–∏—Ñ–æ—Ä–æ–≤–∞', telegram: '@coreference', bathExperience: false },
    { name: '–°–≤–µ—Ç–∞ –°–∫–æ–±–ª–∏–∫–æ–≤–∞', telegram: '@skoblikovas', bathExperience: false },
    { name: '–ò–≥–æ—Ä—å –ö–∞–º–µ–Ω–µ–≤', telegram: '@mrjamesbond', bathExperience: false },
    { name: '–û–ª—å–≥–∞ –ï—Ä–º–æ–ª–∞–µ–≤–∞', telegram: '@for_j_in_range', bathExperience: false }
];

// –†–æ–ª–∏ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
const rolesInfo = {
    '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä': {
        icon: 'üëë',
        description: '–í–µ–¥–µ—Ç –≤—Å—é –≥—Ä—É–ø–ø—É, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å –∏ –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–∞—Ä–µ–Ω–∏–µ. –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é –≤ –ø–∞—Ä–Ω–æ–π. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –ø–∞—Ä–º–∞—Å—Ç–µ—Ä–æ–≤ –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ü–µ—Å—Å–∞.',
        instructionUrl: 'https://example.com/master-guide'
    },
    '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–∞—Ä–º–µ–π—Å—Ç–µ—Ä–∞': {
        icon: 'üåø',
        description: '–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–∞—Ä–µ–Ω–∏–µ, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤–µ–Ω–∏–∫–∞–º–∏ –∏ —Ç—Ä–∞–≤–∞–º–∏. –ü–æ–º–æ–≥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞. –í–ª–∞–¥–µ–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –º–∞—Å—Å–∞–∂–∞ –≤–µ–Ω–∏–∫–∞–º–∏.',
        instructionUrl: 'https://example.com/parmaster-guide'
    },
    '–ò—Å—Ç–æ—á–Ω–∏–∫/–í–æ–¥–æ–≤–æ–∑/–¢–µ—Ö.–≥–∏–¥': {
        icon: 'üíß',
        description: '–¢–æ–ø–∏—Ç –ø–µ—á—å –≤ –±–∞–Ω–µ, –ø–æ–º–æ–≥–∞–µ—Ç —Å —É–±–æ—Ä–∫–æ–π –±–∞–Ω—å, —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–∞–ª–∏—á–∏–µ–º –≤–æ–¥—ã –≤ –±–æ—á–∫–∞—Ö –∏ –ø–∏—Ç—å—è –¥–ª—è –±–∞–Ω—â–∏–∫–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä–Ω–æ–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.',
        instructionUrl: 'https://example.com/tech-guide'
    },
    '–ì—Ä–∏—Ç—Ç–µ—Ä 1': {
        icon: 'üëã',
        description: '–í—Å—Ç—Ä–µ—á–∞–µ—Ç –≥–æ—Å—Ç–µ–π –≤ —Å–µ–Ω—è—Ö, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–∞–Ω—é, –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö, –ø—Ä–æ–≤–æ–∂–∞–µ—Ç –≥–æ—Å—Ç–µ–π –≤ –ª–∞—É–Ω–∂ –ø–æ—Å–ª–µ –±–∞–Ω–∏. –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º–∏.',
        instructionUrl: 'https://example.com/gritter-guide'
    },
    '–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞ - 1': {
        icon: 'üíÜ',
        description: '–ó–∞–±–æ—Ç–∏—Ç—Å—è –æ–± —É—é—Ç–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –ª–µ–∂–∞—á–µ–π –∑–æ–Ω–µ –æ—Ç–¥—ã—Ö–∞, —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏ —É–∫—É—Ç—ã–≤–∞–µ—Ç, –¥–µ–ª–∞–µ—Ç –ª–µ–≥–∫–∏–π –º–∞—Å—Å–∞–∂. –°–æ–∑–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ä–µ–ª–∞–∫—Å–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
        instructionUrl: 'https://example.com/care-guide'
    },
    '–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞': {
        icon: 'üßò',
        description: '–ó–∞–±–æ—Ç–∏—Ç—Å—è –æ–± —É—é—Ç–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –ª–µ–∂–∞—á–µ–π –∑–æ–Ω–µ –æ—Ç–¥—ã—Ö–∞, —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏ —É–∫—É—Ç—ã–≤–∞–µ—Ç, –¥–µ–ª–∞–µ—Ç –ª–µ–≥–∫–∏–π –º–∞—Å—Å–∞–∂. –°–æ–∑–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ä–µ–ª–∞–∫—Å–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
        instructionUrl: 'https://example.com/care-masterclass-guide'
    },
    '–ì–æ—Å—Ç–µ–≤–∞—è –ó–∞–±–æ—Ç–∞': {
        icon: 'ü§ù',
        description: '–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–µ–º–ø–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞ –Ω–∞ —Ä–æ–ª—å –∑–∞–±–æ—Ç—ã. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–µ–º–ø—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è.',
        instructionUrl: 'https://example.com/guest-care-guide'
    },
    '–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å': {
        icon: 'üéì',
        description: '–ü—Ä–æ–≤–æ–¥–∏—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –¥–ª—è –≥–æ—Å—Ç–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —á–∞—Å–æ–≤ –ø–æ–¥—Ä—è–¥. –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–õ–∞—É–Ω–∂".',
        instructionUrl: 'https://example.com/masterclass-guide'
    },
    '–°—Ç—Ä–∞—Ö—É—é—â–∏–π/–£—é—Ç': {
        icon: 'üõ°Ô∏è',
        description: '–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ –≤—ã—à–µ–¥—à–µ–≥–æ –Ω–∞ —à–∏—Ñ—Ç, –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –ª—é–¥–µ–π –≤ —Ä–∞–∑–¥–µ–≤–∞–ª–∫–µ –∏ –∑–∞–æ–Ω–±–æ—Ä–¥–∏—Ç, –Ω–∞–≤–æ–¥–∏—Ç –ø–æ—Ä—è–¥–æ–∫ –≤ —Ä–∞–∑–¥–µ–≤–∞–ª–∫–µ. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä.',
        instructionUrl: 'https://example.com/backup-guide'
    },
    '–ü–æ–≤–∞—Ä–µ–Ω–æ–∫': {
        icon: 'üë®‚Äçüç≥',
        description: '–ì–æ—Ç–æ–≤–∏—Ç –ª–µ–≥–∫–∏–µ –∑–∞–∫—É—Å–∫–∏ –∏ –Ω–∞–ø–∏—Ç–∫–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –±–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç –∏ –ø–∏—Ç–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.',
        instructionUrl: 'https://example.com/cook-guide'
    }
};

const roleGroups = {
    banking: {
        name: '–ë–∞–Ω–Ω—ã–µ',
        roles: ['–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä', '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–∞—Ä–º–µ–π—Å—Ç–µ—Ä–∞', '–ò—Å—Ç–æ—á–Ω–∏–∫/–í–æ–¥–æ–≤–æ–∑/–¢–µ—Ö.–≥–∏–¥']
    },
    care: {
        name: '–ó–∞–±–æ—Ç–∞', 
        roles: ['–ì—Ä–∏—Ç—Ç–µ—Ä 1', '–ì–æ—Å—Ç–µ–≤–∞—è –ó–∞–±–æ—Ç–∞']
    },
    lounge: {
        name: '–õ–∞—É–Ω–∂',
        roles: ['–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞ - 1', '–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞']
    },
    kitchen: {
        name: '–ö—É—Ö–Ω—è',
        roles: ['–ü–æ–≤–∞—Ä–µ–Ω–æ–∫']
    },
    other: {
        name: '–ü—Ä–æ—á–µ–µ',
        roles: ['–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å', '–°—Ç—Ä–∞—Ö—É—é—â–∏–π/–£—é—Ç']
    }
};

const allRoles = Object.values(roleGroups).flatMap(group => group.roles);

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π
const schedule = {
    '13 –∏—é–ª—è': [
        { time: '15:00', endTime: '16:00', sessionNum: 1, status: '–¥–ª—è —Å–≤–æ–∏—Ö', type: '–ë–∞–Ω—è –¥–ª—è —Å–≤–æ–∏—Ö' },
        { time: '17:00', endTime: '18:00', sessionNum: 2, status: '–¥–ª—è —Å–≤–æ–∏—Ö', type: '–ë–∞–Ω—è –¥–ª—è —Å–≤–æ–∏—Ö' },
        { time: '18:00', endTime: '19:00', sessionNum: 3, status: '–¥–ª—è —Å–≤–æ–∏—Ö', type: '–ë–∞–Ω—è –¥–ª—è —Å–≤–æ–∏—Ö' },
        { time: '19:00', endTime: '20:00', sessionNum: 4, status: '–¥–ª—è —Å–≤–æ–∏—Ö', type: '–ë–∞–Ω—è –¥–ª—è —Å–≤–æ–∏—Ö' },
        { time: '20:00', endTime: '21:00', sessionNum: 5, status: '–¥–ª—è —Å–≤–æ–∏—Ö', type: '–ë–∞–Ω—è –¥–ª—è —Å–≤–æ–∏—Ö' }
    ],
    '14 –∏—é–ª—è': [
        { time: '11:00', endTime: '12:00', sessionNum: 6, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '12:00', endTime: '13:00', sessionNum: 7, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '13:00', endTime: '14:00', sessionNum: 8, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '14:00', endTime: '15:00', sessionNum: null, status: '–∫—É—Ö–Ω—è', type: '–û–±–µ–¥', roles: ['–ü–æ–≤–∞—Ä–µ–Ω–æ–∫'] },
        { time: '15:00', endTime: '16:00', sessionNum: 10, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '16:00', endTime: '17:00', sessionNum: 11, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '17:00', endTime: '18:00', sessionNum: 12, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' }
    ],
    '15 –∏—é–ª—è': [
        { time: '11:00', endTime: '12:00', sessionNum: 13, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '12:00', endTime: '13:00', sessionNum: 14, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '13:00', endTime: '14:00', sessionNum: 15, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '14:00', endTime: '15:00', sessionNum: null, status: '–∫—É—Ö–Ω—è', type: '–û–±–µ–¥', roles: ['–ü–æ–≤–∞—Ä–µ–Ω–æ–∫'] },
        { time: '15:00', endTime: '16:00', sessionNum: 17, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '16:00', endTime: '17:00', sessionNum: 18, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' },
        { time: '17:00', endTime: '18:00', sessionNum: 19, status: '–¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–µ—Ç–µ—Ä–∫–∞', type: '–ë–∞–Ω—è –¥–ª—è –≥–æ—Å—Ç–µ–π' }
    ],
    '16 –∏—é–ª—è': [
        { time: '11:00', endTime: '12:00', sessionNum: 20, status: '–¥–ª—è —Å–≤–æ–∏—Ö', type: '–ë–∞–Ω—è –¥–ª—è —Å–≤–æ–∏—Ö' }
    ]
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let assignments = {};
let currentMode = 'user'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
let currentUser = '';
let currentPopupSession = null;
let currentPopupRole = null;
let sessionFilters = {};
let previousPopup = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function getUserCategoryStats(userName) {
    const stats = {};
    Object.values(roleGroups).forEach(group => {
        stats[group.name] = 0;
    });
    
    Object.keys(assignments).forEach(sessionKey => {
        const [day, time] = sessionKey.split('_');
        const session = schedule[day].find(s => s.time === time);
        
        let sessionRoles = allRoles;
        if (session.roles) {
            sessionRoles = session.roles;
        }
        
        sessionRoles.forEach(role => {
            if (assignments[sessionKey][role] === userName) {
                // –ù–∞—Ö–æ–¥–∏–º –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ä–æ–ª—å
                Object.entries(roleGroups).forEach(([groupKey, group]) => {
                    if (group.roles.includes(role)) {
                        stats[group.name]++;
                    }
                });
            }
        });
    });
    
    return stats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª–∏ –≤ –ª–∞—É–Ω–∂–µ
function hasLoungeRole(userName) {
    for (const [sessionKey, sessionRoles] of Object.entries(assignments)) {
        for (const [role, assignedUser] of Object.entries(sessionRoles)) {
            if (assignedUser === userName && roleGroups.lounge.roles.includes(role)) {
                return true;
            }
        }
    }
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–ª–æ—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
function getMasterClassPairSlot(sessionKey) {
    const [day, time] = sessionKey.split('_');
    const currentHour = parseInt(time.split(':')[0]);
    
    // –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–π —Å–ª–æ—Ç (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å)
    const prevTime = `${currentHour - 1}:00`;
    const nextTime = `${currentHour + 1}:00`;
    
    const prevKey = `${day}_${prevTime}`;
    const nextKey = `${day}_${nextTime}`;
    
    if (assignments[prevKey]) return prevKey;
    if (assignments[nextKey]) return nextKey;
    
    return null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const userSelect = document.getElementById('currentUser');
    participants.forEach(participant => {
        const option = document.createElement('option');
        option.value = participant.name;
        option.textContent = `${participant.name} (${participant.telegram})`;
        userSelect.appendChild(option);
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    Object.keys(schedule).forEach(day => {
        schedule[day].forEach(session => {
            const sessionKey = `${day}_${session.time}`;
            assignments[sessionKey] = {};
            sessionFilters[sessionKey] = 'all';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
            let sessionRoles = allRoles;
            if (session.roles) {
                sessionRoles = session.roles; // –î–ª—è –∫—É—Ö–æ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            }
            
            sessionRoles.forEach(role => {
                assignments[sessionKey][role] = null;
            });
        });
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    autoDistributeInitially();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –∏–∑ localStorage
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);
    
    startCountdown();
    updateMenu();
    renderSchedule();
    updateProgress();
}

// –§—É–Ω–∫—Ü–∏–∏ —Ç–µ–º—ã
function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
    const newTheme = currentTheme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
}

function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    
    const themeToggle = document.querySelector('.theme-toggle');
    themeToggle.textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
function autoDistributeInitially() {
    const experiencedBathMasters = participants.filter(p => p.bathExperience);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const userShiftCount = {};
    participants.forEach(p => userShiftCount[p.name] = 0);
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–∞–µ–º –≥–ª–∞–≤–Ω—ã—Ö –±–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –æ–ø—ã—Ç–Ω—ã—Ö –¥–ª—è –±–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    Object.keys(assignments).forEach((sessionKey, index) => {
        const [day, time] = sessionKey.split('_');
        const session = schedule[day].find(s => s.time === time);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É—Ö–æ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        if (session.status === '–∫—É—Ö–Ω—è') return;
        
        const masterRole = '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä';
        if (experiencedBathMasters.length > 0 && assignments[sessionKey][masterRole] !== undefined) {
            const masterIndex = index % experiencedBathMasters.length;
            const selectedMaster = experiencedBathMasters[masterIndex];
            assignments[sessionKey][masterRole] = selectedMaster.name;
            userShiftCount[selectedMaster.name]++;
        }
    });
    
    // –ó–∞—Ç–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
    Object.keys(assignments).forEach(sessionKey => {
        const [day, time] = sessionKey.split('_');
        const session = schedule[day].find(s => s.time === time);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
        let sessionRoles = allRoles;
        if (session.roles) {
            sessionRoles = session.roles;
        }
        
        sessionRoles.forEach(role => {
            if (role !== '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä' && !assignments[sessionKey][role]) {
                const minShifts = Math.min(...Object.values(userShiftCount));
                const availableUsers = Object.keys(userShiftCount).filter(user => {
                    return userShiftCount[user] === minShifts && !isUserBusyInSession(sessionKey, user);
                });
                
                if (availableUsers.length > 0) {
                    const selectedUser = availableUsers[Math.floor(Math.random() * availableUsers.length)];
                    assignments[sessionKey][role] = selectedUser;
                    userShiftCount[selectedUser]++;
                }
            }
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
function isUserBusyInSession(sessionKey, userName) {
    const sessionTime = sessionKey.split('_')[1];
    
    for (const [checkSessionKey, sessionRoles] of Object.entries(assignments)) {
        const checkTime = checkSessionKey.split('_')[1];
        if (checkTime === sessionTime) {
            for (const assignedUser of Object.values(sessionRoles)) {
                if (assignedUser === userName) {
                    return true;
                }
            }
        }
    }
    return false;
}

// –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
function startCountdown() {
    const deadline = new Date('2025-07-08T23:59:59');
    
    function updateCountdown() {
        const now = new Date();
        const timeLeft = deadline - now;
        
        if (timeLeft > 0) {
            const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            
            document.getElementById('countdown').textContent = 
                `‚è∞ ${days}–¥ ${hours}—á ${minutes}–º ${seconds}—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞`;
        } else {
            document.getElementById('countdown').textContent = 'üî¥ –î–ï–î–õ–ê–ô–ù –ò–°–¢–ï–ö!';
        }
    }
    
    updateCountdown();
    setInterval(updateCountdown, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
function updateMenu() {
    const menuItems = document.getElementById('menuItems');
    let html = '';
    
    if (currentMode === 'admin') {
        html = `
            <div class="menu-item" onclick="setMode('user'); closeMenu();">
                üë§ –†–µ–∂–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            </div>
            <div class="menu-item" onclick="openStatsPopup(); closeMenu();">
                üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </div>
            <div class="menu-item" onclick="openSchedulePopup(); closeMenu();">
                üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            </div>
            <div class="menu-item" onclick="openDataEditPopup(); closeMenu();">
                ‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            </div>
            <div class="menu-item" onclick="openRolesInfoPopup(); closeMenu();">
                ‚ùì –û —à–∏—Ñ—Ç–∞—Ö
            </div>
        `;
    } else {
        html = `
            <div class="menu-item" onclick="setMode('admin'); closeMenu();">
                üë®‚Äçüíº –ê–¥–º–∏–Ω —Ä–µ–∂–∏–º
            </div>
            <div class="menu-item" onclick="openMySchedule(); closeMenu();">
                üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            </div>
            <div class="menu-item" onclick="openRolesInfoPopup(); closeMenu();">
                ‚ùì –û —à–∏—Ñ—Ç–∞—Ö
            </div>
        `;
    }
    
    menuItems.innerHTML = html;
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–µ
function showBathInfo() {
    alert(`–ë–∞–Ω–Ω—ã–π –∫–µ–º–ø NEVESOMO\n\n–ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥—è—Ç –±–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –ø–∞—Ä–µ–Ω–∏–µ–º, –º–∞—Å—Å–∞–∂–µ–º –∏ –∑–∞–±–æ—Ç–æ–π –æ –≥–æ—Å—Ç—è—Ö.\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–æ–ª–µ–π.`);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
function setMode(mode) {
    currentMode = mode;
    
    const deadlineWarning = document.getElementById('deadlineWarning');
    const userSelector = document.getElementById('userSelector');
    const myScheduleBtn = document.getElementById('myScheduleBtn');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    
    if (mode === 'admin') {
        deadlineWarning.style.display = 'none';
        userSelector.style.display = 'none';
        myScheduleBtn.style.display = 'none';
        progressBar.style.display = 'none';
        progressText.style.display = 'none';
    } else {
        deadlineWarning.style.display = 'block';
        userSelector.style.display = 'block';
        myScheduleBtn.style.display = 'block';
        progressBar.style.display = 'block';
        progressText.style.display = 'block';
    }
    
    updateMenu();
    updateView();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞
function updateView() {
    if (currentMode === 'user') {
        currentUser = document.getElementById('currentUser').value;
    }
    renderSchedule();
    updateProgress();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
function updateProgress() {
    if (currentMode !== 'user' || !currentUser) {
        document.getElementById('progressBar').style.display = 'none';
        document.getElementById('progressText').style.display = 'none';
        return;
    }
    
    let userShifts = 0;
    Object.values(assignments).forEach(session => {
        Object.values(session).forEach(user => {
            if (user === currentUser) {
                userShifts++;
            }
        });
    });
    
    const minShifts = 8; // –ú–∏–Ω–∏–º—É–º —à–∏—Ñ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const progress = Math.min((userShifts / minShifts) * 100, 100);
    
    document.getElementById('progressFill').style.width = `${progress}%`;
    
    if (progress >= 100) {
        document.getElementById('progressText').textContent = '‚úÖ –í—Å–µ —à–∏—Ñ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!';
        document.getElementById('deadlineWarning').style.display = 'none';
        setTimeout(() => {
            document.getElementById('progressBar').style.display = 'none';
            document.getElementById('progressText').style.display = 'none';
        }, 3000);
    } else {
        document.getElementById('progressText').textContent = `${userShifts}/${minShifts} —à–∏—Ñ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ`;
        document.getElementById('deadlineWarning').style.display = 'block';
    }
}

// –ú–µ–Ω—é
function toggleMenu() {
    const menuOverlay = document.getElementById('menuOverlay');
    menuOverlay.classList.toggle('show');
}

function closeMenu() {
    document.getElementById('menuOverlay').classList.remove('show');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function toggleSession(sessionKey) {
    const sessionElement = document.querySelector(`[data-session="${sessionKey}"]`);
    sessionElement.classList.toggle('expanded');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–µ—Å—Å–∏–∏
function setSessionFilter(sessionKey, filter) {
    sessionFilters[sessionKey] = filter;
    
    const sessionElement = document.querySelector(`[data-session="${sessionKey}"]`);
    sessionElement.querySelectorAll('.session-tab').forEach(tab => tab.classList.remove('active'));
    sessionElement.querySelector(`[data-filter="${filter}"]`).classList.add('active');
    
    renderSessionRoles(sessionKey);
    updateSessionTabs(sessionKey);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
function getUserRolesInSession(sessionKey, userName) {
    const [day, time] = sessionKey.split('_');
    const session = schedule[day].find(s => s.time === time);
    const sessionAssignments = assignments[sessionKey];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
    let sessionRoles = allRoles;
    if (session.roles) {
        sessionRoles = session.roles;
    }
    
    return sessionRoles.filter(role => sessionAssignments[role] === userName);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function renderSchedule() {
    const scheduleDiv = document.getElementById('schedule');
    scheduleDiv.innerHTML = '';
    
    Object.keys(schedule).forEach(day => {
        const dayDiv = document.createElement('div');
        dayDiv.className = 'day-section';
        
        dayDiv.innerHTML = `
            <div class="day-header">${day}</div>
            ${schedule[day].map(session => renderSession(day, session)).join('')}
        `;
        
        scheduleDiv.appendChild(dayDiv);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∞–±—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    setTimeout(() => {
        Object.keys(schedule).forEach(day => {
            schedule[day].forEach(session => {
                const sessionKey = `${day}_${session.time}`;
                updateSessionTabs(sessionKey);
            });
        });
    }, 0);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
function renderSession(day, session) {
    const sessionKey = `${day}_${session.time}`;
    const sessionAssignments = assignments[sessionKey];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
    let sessionRoles = allRoles;
    if (session.roles) {
        sessionRoles = session.roles; // –î–ª—è –∫—É—Ö–æ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    }
    
    const filledRoles = sessionRoles.filter(role => sessionAssignments[role] !== null && sessionAssignments[role] !== undefined).length;
    const totalRoles = sessionRoles.length;
    const percentage = totalRoles > 0 ? Math.round((filledRoles / totalRoles) * 100) : 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª–∏ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    const userRoles = currentMode === 'user' && currentUser ? 
        getUserRolesInSession(sessionKey, currentUser) : [];
    const hasUserAssignment = userRoles.length > 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫—Ä—É–∂–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let progressClass = 'empty';
    if (percentage === 100) {
        progressClass = 'complete';
    } else if (percentage > 0) {
        progressClass = 'partial';
    }
    
    const sessionHtml = `
        <div class="session ${hasUserAssignment ? 'user-assigned' : ''}" data-session="${sessionKey}">
            <div class="session-compact" onclick="toggleSession('${sessionKey}')">
                <div class="session-info">
                    <div class="session-basic-info">
                        <div class="session-time">${session.time} - ${session.endTime}</div>
                        <div class="session-details">
                            <a href="#" class="bath-link" onclick="event.stopPropagation(); showBathInfo()">${session.type}</a>
                        </div>
                    </div>
                    ${hasUserAssignment ? `<div class="session-user-indicator">–ú–æ–π —à–∏—Ñ—Ç: ${userRoles.join(', ')}</div>` : ''}
                    <div class="session-stats">
                        <div class="progress-display">
                            <div class="progress-circle ${progressClass}">${percentage}%</div>
                            <div class="progress-label">${totalRoles} —à–∏—Ñ—Ç–æ–≤</div>
                        </div>
                        ${percentage < 100 && currentMode === 'admin' && session.status !== '–∫—É—Ö–Ω—è' ? `<button class="auto-fill-slot-btn" onclick="event.stopPropagation(); autoFillSession('${sessionKey}')">–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</button>` : ''}
                    </div>
                </div>
            </div>
            ${session.status !== '–∫—É—Ö–Ω—è' ? `
            <div class="session-expanded">
                <div class="session-tabs">
                    <button class="session-tab active" data-filter="all" onclick="setSessionFilter('${sessionKey}', 'all')">–í—Å–µ</button>
                    ${Object.entries(roleGroups).map(([key, group]) => 
                        `<button class="session-tab" data-filter="${key}" onclick="setSessionFilter('${sessionKey}', '${key}')">${group.name}</button>`
                    ).join('')}
                </div>
                <div class="roles-container" id="roles-${sessionKey}">
                    ${renderSessionRoles(sessionKey)}
                </div>
            </div>
            ` : `
            <div class="session-expanded">
                <div class="roles-grid">
                    ${sessionRoles.map(role => renderRoleSlot(sessionKey, role)).join('')}
                </div>
            </div>
            `}
        </div>
    `;
    
    // –ü–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±—ã
    if (session.status !== '–∫—É—Ö–Ω—è') {
        setTimeout(() => updateSessionTabs(sessionKey), 0);
    }
    
    return sessionHtml;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–æ–ª–µ–π —Å–µ—Å—Å–∏–∏
function renderSessionRoles(sessionKey) {
    const filter = sessionFilters[sessionKey];
    let rolesToShow = allRoles;
    
    if (filter !== 'all') {
        rolesToShow = roleGroups[filter].roles;
    }
    
    const rolesHtml = `
        <div class="roles-grid">
            ${rolesToShow.map(role => renderRoleSlot(sessionKey, role)).join('')}
        </div>
    `;
    
    const container = document.getElementById(`roles-${sessionKey}`);
    if (container) {
        container.innerHTML = rolesHtml;
    }
    
    return rolesHtml;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–æ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
function getEmptyRolesCount(sessionKey, groupRoles) {
    const sessionAssignments = assignments[sessionKey];
    return groupRoles.filter(role => !sessionAssignments[role]).length;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–æ–ª–µ–π
function updateSessionTabs(sessionKey) {
    const sessionElement = document.querySelector(`[data-session="${sessionKey}"]`);
    if (!sessionElement) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–± "–í—Å–µ"
    const allTab = sessionElement.querySelector('[data-filter="all"]');
    if (allTab) {
        const totalEmpty = getEmptyRolesCount(sessionKey, allRoles);
        if (totalEmpty > 0) {
            allTab.innerHTML = `–í—Å–µ <span class="empty-count">${totalEmpty}</span>`;
        } else {
            allTab.innerHTML = '–í—Å–µ';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±—ã –≥—Ä—É–ø–ø
    Object.entries(roleGroups).forEach(([key, group]) => {
        const groupTab = sessionElement.querySelector(`[data-filter="${key}"]`);
        if (groupTab) {
            const groupEmpty = getEmptyRolesCount(sessionKey, group.roles);
            if (groupEmpty > 0) {
                groupTab.innerHTML = `${group.name} <span class="empty-count">${groupEmpty}</span>`;
            } else {
                groupTab.innerHTML = group.name;
            }
        }
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ª–æ—Ç–∞ —Ä–æ–ª–∏
function renderRoleSlot(sessionKey, role) {
    const assignedUser = assignments[sessionKey][role];
    const isBlocked = isSlotBlocked(sessionKey, role);
    const isCurrentUser = currentMode === 'user' && assignedUser === currentUser;
    const shouldFade = currentMode === 'user' && currentUser && 
                      getUserRolesInSession(sessionKey, currentUser).length > 0 && !isCurrentUser;
    
    let className = 'role-slot';
    let userDisplay = '–°–≤–æ–±–æ–¥–Ω–æ';
    
    if (assignedUser) {
        className += ' occupied';
        userDisplay = assignedUser;
        
        if (isCurrentUser) {
            className += ' current-user';
        }
    } else if (isBlocked) {
        className += ' blocked';
        userDisplay = '–ó–∞–Ω—è—Ç–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è';
    }
    
    if (shouldFade) {
        className += ' faded';
    }
    
    return `
        <div class="${className}" onclick="handleRoleSlotClick('${sessionKey}', '${role}')">
            <div class="role-name">${role}</div>
            <div class="role-user">${userDisplay}</div>
            ${isCurrentUser ? '<div class="role-checkmark">‚úì</div>' : ''}
        </div>
    `;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—Ç—É —Ä–æ–ª–∏
function handleRoleSlotClick(sessionKey, role) {
    if (currentMode === 'admin') {
        openParticipantPopup(sessionKey, role);
    } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
        if (role === '–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å') {
            if (!hasLoungeRole(currentUser)) {
                alert('–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–õ–∞—É–Ω–∂". –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±–µ —à–∏—Ñ—Ç –≤ –ª–∞—É–Ω–∂–µ!');
                return;
            }
        }
        
        toggleUserAssignment(sessionKey, role);
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
function openParticipantPopup(sessionKey, role) {
    currentPopupSession = sessionKey;
    currentPopupRole = role;
    
    const participantsList = document.getElementById('participantsList');
    const currentAssignment = assignments[sessionKey][role];
    
    let html = `
        <div class="participant-item" onclick="selectParticipant(null)" style="border-bottom: 1px solid #E0E0E0; margin-bottom: 12px; padding-bottom: 12px;">
            <div class="participant-name">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ—Ç</div>
            <div class="participant-telegram">–£–±—Ä–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ</div>
        </div>
        <div class="participant-item" onclick="selectParticipant('–£—á–∞—Å—Ç–Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ –∫–µ–º–ø–∞')" style="border-bottom: 1px solid #E0E0E0; margin-bottom: 12px; padding-bottom: 12px;">
            <div class="participant-name">üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ –∫–µ–º–ø–∞</div>
            <div class="participant-telegram">–í–Ω–µ—à–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫</div>
        </div>
    `;
    
    participants.forEach(participant => {
        const isSelected = participant.name === currentAssignment;
        html += `
            <div class="participant-item ${isSelected ? 'selected' : ''}" onclick="selectParticipant('${participant.name}')" style="background: ${isSelected ? '#E8F5E8' : '#F7F7F7'}; margin-bottom: 8px; border-radius: 8px;">
                <div class="participant-name">${participant.name} ${isSelected ? '‚úì' : ''}</div>
                <div class="participant-telegram">${participant.telegram}</div>
            </div>
        `;
    });
    
    participantsList.innerHTML = html;
    document.getElementById('participantPopup').classList.add('show');
}

// –í—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
function selectParticipant(participantName) {
    if (currentPopupSession && currentPopupRole) {
        const role = currentPopupRole;
        const sessionKey = currentPopupSession;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
        if (role === '–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å') {
            const pairSlot = getMasterClassPairSlot(sessionKey);
            if (pairSlot && participantName) {
                // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –æ–±–∞ —Å–ª–æ—Ç–∞
                assignments[sessionKey][role] = participantName;
                assignments[pairSlot][role] = participantName;
            } else if (pairSlot && !participantName) {
                // –û—á–∏—â–∞–µ–º –æ–±–∞ —Å–ª–æ—Ç–∞
                assignments[sessionKey][role] = null;
                assignments[pairSlot][role] = null;
            } else {
                assignments[sessionKey][role] = participantName;
            }
        } else {
            assignments[sessionKey][role] = participantName;
        }
        
        renderSchedule();
        updateProgress();
    }
    closeParticipantPopup();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
function closeParticipantPopup() {
    document.getElementById('participantPopup').classList.remove('show');
    currentPopupSession = null;
    currentPopupRole = null;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function toggleUserAssignment(sessionKey, role) {
    if (!currentUser) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
        return;
    }
    
    const currentAssignment = assignments[sessionKey][role];
    const isBlocked = isSlotBlocked(sessionKey, role);
    
    if (isBlocked && currentAssignment !== currentUser) {
        alert('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–∞—è —Ä–æ–ª—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è!');
        return;
    }
    
    if (currentAssignment === currentUser) {
        // –°–Ω–∏–º–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        if (role === '–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å') {
            const pairSlot = getMasterClassPairSlot(sessionKey);
            if (pairSlot) {
                assignments[pairSlot][role] = null;
            }
        }
        assignments[sessionKey][role] = null;
    } else if (currentAssignment === null) {
        // –ù–∞–∑–Ω–∞—á–∞–µ–º
        if (role === '–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å') {
            const pairSlot = getMasterClassPairSlot(sessionKey);
            if (pairSlot) {
                assignments[pairSlot][role] = currentUser;
            }
        }
        assignments[sessionKey][role] = currentUser;
    } else {
        alert('–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        return;
    }
    
    renderSchedule();
    updateProgress();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–ª–æ—Ç–∞
function isSlotBlocked(sessionKey, role) {
    if (currentMode !== 'user' || !currentUser) return false;
    
    const sessionTime = sessionKey.split('_')[1];
    
    for (const [checkSessionKey, sessionRoles] of Object.entries(assignments)) {
        const checkTime = checkSessionKey.split('_')[1];
        if (checkTime === sessionTime) {
            for (const [checkRole, assignedUser] of Object.entries(sessionRoles)) {
                if (assignedUser === currentUser && checkRole !== role) {
                    return true;
                }
            }
        }
    }
    
    return false;
}

// –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function autoFillSession(sessionKey) {
    const [day, time] = sessionKey.split('_');
    const session = schedule[day].find(s => s.time === time);
    const sessionAssignments = assignments[sessionKey];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
    let sessionRoles = allRoles;
    if (session.roles) {
        sessionRoles = session.roles;
    }
    
    const emptyRoles = sessionRoles.filter(role => !sessionAssignments[role]);
    
    if (emptyRoles.length === 0) {
        alert('–í—Å–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!');
        return;
    }
    
    const userShiftCount = {};
    participants.forEach(p => userShiftCount[p.name] = 0);
    
    Object.values(assignments).forEach(sessionData => {
        Object.values(sessionData).forEach(user => {
            if (user && userShiftCount.hasOwnProperty(user)) {
                userShiftCount[user]++;
            }
        });
    });
    
    emptyRoles.forEach(role => {
        const availableUsers = participants.filter(p => 
            !isUserBusyInSession(sessionKey, p.name) &&
            (role !== '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä' || p.bathExperience)
        );
        
        if (availableUsers.length > 0) {
            const minShifts = Math.min(...availableUsers.map(u => userShiftCount[u.name]));
            const leastBusyUsers = availableUsers.filter(u => userShiftCount[u.name] === minShifts);
            const selectedUser = leastBusyUsers[Math.floor(Math.random() * leastBusyUsers.length)];
            
            assignments[sessionKey][role] = selectedUser.name;
            userShiftCount[selectedUser.name]++;
        }
    });
    
    renderSchedule();
    updateProgress();
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
function openStatsPopup() {
    const statsList = document.getElementById('statsList');
    
    const userStats = participants.map(participant => {
        let shiftsCount = 0;
        const categoryStats = getUserCategoryStats(participant.name);
        
        Object.keys(assignments).forEach(sessionKey => {
            const [day, time] = sessionKey.split('_');
            const session = schedule[day].find(s => s.time === time);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
            let sessionRoles = allRoles;
            if (session.roles) {
                sessionRoles = session.roles;
            }
            
            sessionRoles.forEach(role => {
                if (assignments[sessionKey][role] === participant.name) {
                    shiftsCount++;
                }
            });
        });
        
        return {
            name: participant.name,
            shifts: shiftsCount,
            complete: shiftsCount >= 8,
            categories: categoryStats
        };
    });
    
    let html = '';
    userStats.forEach(user => {
        const categoriesHtml = Object.entries(user.categories)
            .filter(([category, count]) => count > 0)
            .map(([category, count]) => `<div class="stats-category">${category}: ${count}</div>`)
            .join('');
        
        html += `
            <div class="stats-user ${user.complete ? 'complete' : 'incomplete'}">
                <div class="stats-user-header">
                    <div class="stats-name">${user.name}</div>
                    <div class="stats-total ${user.complete ? 'complete' : 'incomplete'}">
                        ${user.shifts}/8 —à–∏—Ñ—Ç–æ–≤
                    </div>
                </div>
                <div class="stats-categories">
                    ${categoriesHtml || '<div class="stats-category">–®–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</div>'}
                </div>
            </div>
        `;
    });
    
    statsList.innerHTML = html;
    document.getElementById('statsPopup').classList.add('show');
}

function closeStatsPopup() {
    document.getElementById('statsPopup').classList.remove('show');
}

// –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ / –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
function openMySchedule() {
    previousPopup = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ø–∞–ø
    openSchedulePopup();
}

function openSchedulePopup() {
    const scheduleBody = document.getElementById('scheduleBody');
    let html = '';
    
    if (currentMode === 'user' && currentUser) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        const participant = participants.find(p => p.name === currentUser);
        let shiftsCount = 0;
        const categoryStats = getUserCategoryStats(currentUser);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ñ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        Object.keys(assignments).forEach(sessionKey => {
            const [day, time] = sessionKey.split('_');
            const session = schedule[day].find(s => s.time === time);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
            let sessionRoles = allRoles;
            if (session.roles) {
                sessionRoles = session.roles;
            }
            
            sessionRoles.forEach(role => {
                if (assignments[sessionKey][role] === currentUser) {
                    shiftsCount++;
                }
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        html += `
            <div class="user-profile">
                <div class="user-name">${currentUser}</div>
                <a href="https://t.me/${participant.telegram.replace('@', '')}" class="user-telegram" target="_blank">${participant.telegram}</a>
                <div class="user-stats">
                    <div class="stat-item">
                        <div class="stat-number">${shiftsCount}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ —à–∏—Ñ—Ç–æ–≤</div>
                    </div>
                    ${Object.entries(categoryStats)
                        .filter(([category, count]) => count > 0)
                        .map(([category, count]) => `
                            <div class="stat-item">
                                <div class="stat-number">${count}</div>
                                <div class="stat-label">${category}</div>
                            </div>
                        `).join('')}
                </div>
            </div>
        `;
        
        // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —à–∏—Ñ—Ç—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        const userShiftsByDay = {};
        
        Object.keys(assignments).forEach(sessionKey => {
            const [day, time] = sessionKey.split('_');
            const session = schedule[day].find(s => s.time === time);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
            let sessionRoles = allRoles;
            if (session.roles) {
                sessionRoles = session.roles;
            }
            
            sessionRoles.forEach(role => {
                if (assignments[sessionKey][role] === currentUser) {
                    if (!userShiftsByDay[day]) {
                        userShiftsByDay[day] = [];
                    }
                    userShiftsByDay[day].push({
                        time,
                        endTime: session.endTime,
                        sessionNum: session.sessionNum,
                        type: session.type,
                        role
                    });
                }
            });
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        const sortedDays = Object.keys(userShiftsByDay).sort((a, b) => {
            const dateA = parseInt(a.split(' ')[0]);
            const dateB = parseInt(b.split(' ')[0]);
            return dateA - dateB;
        });
        
        if (sortedDays.length === 0) {
            html += '<div style="text-align: center; color: var(--text-secondary); padding: 40px;">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —à–∏—Ñ—Ç–æ–≤</div>';
        } else {
            sortedDays.forEach(day => {
                html += `<h2 style="margin: 24px 0 16px 0; color: var(--accent-primary); font-size: 1.4em;">${day}</h2>`;
                
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º —à–∏—Ñ—Ç—ã –≤ –¥–Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                userShiftsByDay[day].sort((a, b) => a.time.localeCompare(b.time));
                
                userShiftsByDay[day].forEach(shift => {
                    html += `
                        <div class="schedule-item">
                            <div class="schedule-item-header">
                                <div class="schedule-time">${shift.time} - ${shift.endTime}</div>
                            </div>
                            <div class="schedule-role">${shift.role}</div>
                            <div class="schedule-info">${shift.sessionNum ? `–ë–∞–Ω—è #${shift.sessionNum}` : '–ö—É—Ö–Ω—è'} ‚Ä¢ ${shift.type}</div>
                            <div class="schedule-actions">
                                <button class="info-btn" onclick="showRoleDetail('${shift.role}', 'schedule')">‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                            </div>
                        </div>
                    `;
                });
            });
        }
    } else {
        // –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        Object.keys(schedule).forEach(day => {
            html += `<h3 style="margin: 20px 0 16px 0; color: var(--accent-primary);">${day}</h3>`;
            
            schedule[day].forEach(session => {
                const sessionKey = `${day}_${session.time}`;
                html += `
                    <div class="schedule-item">
                        <div class="schedule-item-header">
                            <div class="schedule-time">${session.time} - ${session.endTime}</div>
                            <div>${session.sessionNum ? `–ë–∞–Ω—è #${session.sessionNum}` : '–ö—É—Ö–Ω—è'}</div>
                        </div>
                        <div class="schedule-info" style="margin-bottom: 12px;">${session.type}</div>
                `;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Å—Å–∏–∏
                let sessionRoles = allRoles;
                if (session.roles) {
                    sessionRoles = session.roles;
                }
                
                sessionRoles.forEach(role => {
                    const assignedUser = assignments[sessionKey][role];
                    html += `
                        <div style="display: flex; justify-content: space-between; margin: 4px 0; padding: 4px 0;">
                            <span style="color: var(--text-secondary); font-size: 0.9em;">${role}:</span>
                            <span style="font-weight: 500;">${assignedUser || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'}</span>
                        </div>
                    `;
                });
                
                html += '</div>';
            });
        });
    }
    
    scheduleBody.innerHTML = html;
    document.getElementById('schedulePopup').classList.add('show');
}

function closeSchedulePopup() {
    document.getElementById('schedulePopup').classList.remove('show');
}

function shareSchedule() {
    if (navigator.share) {
        navigator.share({
            title: '–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —à–∏—Ñ—Ç–æ–≤ NEVESOMO',
            text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–Ω–Ω—ã—Ö —à–∏—Ñ—Ç–æ–≤',
            url: window.location.href
        });
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
        navigator.clipboard.writeText(window.location.href);
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
}

// –û —à–∏—Ñ—Ç–∞—Ö
function openRolesInfoPopup() {
    previousPopup = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ø–∞–ø
    const rolesInfoBody = document.getElementById('rolesInfoBody');
    
    let html = '<div style="margin-bottom: 20px; color: var(--text-secondary);">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:</div>';
    
    Object.entries(roleGroups).forEach(([groupKey, group]) => {
        html += `<h3 style="margin: 24px 0 12px 0; color: var(--accent-primary);">${group.name}</h3>`;
        
        group.roles.forEach(role => {
            const roleInfo = rolesInfo[role];
            html += `
                <div class="roles-list-item" onclick="showRoleDetail('${role}', 'roles')">
                    <div>
                        <div style="font-weight: 500; margin-bottom: 4px;">${roleInfo.icon} ${role}</div>
                        <div style="color: var(--text-secondary); font-size: 0.9em;">${roleInfo.description.substring(0, 60)}...</div>
                    </div>
                    <div style="color: var(--accent-primary);">‚Ä∫</div>
                </div>
            `;
        });
    });
    
    rolesInfoBody.innerHTML = html;
    document.getElementById('rolesInfoPopup').classList.add('show');
}

function closeRolesInfoPopup() {
    document.getElementById('rolesInfoPopup').classList.remove('show');
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏
function showRoleDetail(role, sourcePopup = null) {
    previousPopup = sourcePopup; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    const roleInfo = rolesInfo[role];
    
    document.getElementById('roleDetailTitle').textContent = role;
    document.getElementById('roleDetailImage').textContent = roleInfo.icon;
    document.getElementById('roleDetailDescription').textContent = roleInfo.description;
    document.getElementById('roleDetailLink').href = roleInfo.instructionUrl;
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø–∞–ø—ã
    document.getElementById('rolesInfoPopup').classList.remove('show');
    document.getElementById('schedulePopup').classList.remove('show');
    
    document.getElementById('roleDetailPopup').classList.add('show');
}

function closeRoleDetailPopup() {
    document.getElementById('roleDetailPopup').classList.remove('show');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–ø–∞–ø –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (previousPopup === 'roles') {
        document.getElementById('rolesInfoPopup').classList.add('show');
    } else if (previousPopup === 'schedule') {
        document.getElementById('schedulePopup').classList.add('show');
    }
    previousPopup = null;
}

function showRoleInfo(role) {
    showRoleDetail(role);
}

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function openDataEditPopup() {
    alert('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è\n- –ò–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–Ω–µ\n- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
init();