// data-manager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ ES6 –º–æ–¥—É–ª–µ–π)

/* === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–ê–ù–ù–´–• === */
let participants = [];
let rolesInfo = {};
let roleGroups = {};
let schedule = {};
let allRoles = [];
let appSettings = {};
let assignments = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
let isDataLoaded = false;
let isDataLoading = false;

/* === –§–£–ù–ö–¶–ò–ò –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò === */
function showLoadingState() {
    const container = document.getElementById('schedule');
    if (container) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 2em; margin-bottom: 16px;">‚è≥</div>
                <div style="font-size: 1.2em; color: var(--text-secondary);">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable...</div>
            </div>
        `;
    }
}

function showErrorState(errorMessage) {
    const container = document.getElementById('schedule');
    if (container) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 2em; margin-bottom: 16px;">‚ùå</div>
                <div style="font-size: 1.2em; color: var(--error-color); margin-bottom: 16px;">
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                </div>
                <div style="color: var(--text-secondary); margin-bottom: 16px;">
                    ${errorMessage}
                </div>
                <button onclick="location.reload()" style="background: var(--accent-primary); color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer;">
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                </button>
            </div>
        `;
    }
}

/* === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó AIRTABLE === */
// data_manager.js
// üí° –ó–∞–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º ‚Üì
async function loadAirtableData () {
    if (isDataLoading) return;

    isDataLoading = true;
    // showLoadingState();

    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable‚Ä¶');

        if (!window.airtableService) {
            throw new Error('Airtable service –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }

        const data = await window.airtableService.getAllData();

        /* ---------- –£–ß–ê–°–¢–ù–ò–ö–ò ---------- */
        participants.length = 0;

        // üëâ –ù–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∏–º–µ–Ω–∏ –ò–õ–ò telegram-—Å—Å—ã–ª–∫–∏
        const cleanedParticipants = (data.participants || [])
            .filter(p => p.name && p.telegram);

        participants.push(
            ...cleanedParticipants.map(p => ({
                name          : p.name,
                telegram      : p.telegram,
                telegramId    : p.telegramId,
                isAdmin       : p.isAdmin,
                bathExperience: p.bathExperience
            }))
        );

        /* ---------- –†–û–õ–ò ---------- */
        Object.keys(rolesInfo).forEach(key => delete rolesInfo[key]);
        const validRoles = [];

        data.roles.forEach(role => {
            if (role.isActive && role.name) {
                rolesInfo[role.id] = role;
                validRoles.push(role.id);
            }
        });

        /* ---------- –ì–†–£–ü–ü–´ –†–û–õ–ï–ô ---------- */
        Object.keys(roleGroups).forEach(key => delete roleGroups[key]);
        data.roleGroups.forEach(group => {
            if (group.isActive && group.name) {
                roleGroups[group.id] = group;
            }
        });

        /* ---------- –†–ê–°–ü–ò–°–ê–ù–ò–ï ---------- */
        Object.keys(schedule).forEach(key => delete schedule[key]);
        data.schedule.forEach(slot => {
            schedule[slot.id] = slot;
        });

        /* ---------- –ù–ê–°–¢–†–û–ô–ö–ò ---------- */
        Object.keys(appSettings).forEach(key => delete appSettings[key]);
        Object.assign(appSettings, data.settings);

        /* ---------- –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø ---------- */
        await loadAssignments(data.assignments);

        isDataLoaded            = true;
        window.participants     = participants; // –¥–ª—è telegram.js

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
            participants : participants.length,
            roles        : Object.keys(rolesInfo).length,
            roleGroups   : Object.keys(roleGroups).length,
            schedule     : Object.keys(schedule).length,
            assignments  : Object.keys(assignments).length
        });

        // –°–æ–æ–±—â–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é, —á—Ç–æ –≤—Å—ë –≥–æ—Ç–æ–≤–æ
        window.dispatchEvent(new CustomEvent('dataLoaded'));

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        // showErrorState(error.message);
        throw error;

    } finally {
        isDataLoading = false;
    }
}


async function loadAssignments(assignmentsData) {
    Object.keys(assignments).forEach(key => delete assignments[key]);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º assignments –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∏ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    Object.keys(schedule).forEach(day => {
        schedule[day].forEach(session => {
            const sessionKey = `${day}_${session.time}`;
            assignments[sessionKey] = {};
            
            // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã, –∏–Ω–∞—á–µ –≤—Å–µ —Ä–æ–ª–∏
            let sessionRoles = allRoles;
            if (session.roles && session.roles.length > 0) {
                sessionRoles = session.roles;
                console.log(`üìù –°–µ—Å—Å–∏—è ${sessionKey} –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:`, sessionRoles);
            } else {
                console.log(`üìù –°–µ—Å—Å–∏—è ${sessionKey} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ —Ä–æ–ª–∏:`, allRoles.length);
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ–ª–∏ –∫–∞–∫ null
            sessionRoles.forEach(role => {
                assignments[sessionKey][role] = null;
            });
        });
    });
    
    console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã assignments:', Object.keys(assignments).length, '—Å–µ—Å—Å–∏–π');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Airtable
    assignmentsData.forEach(assignment => {
        const sessionKey = `${assignment.slotDate}_${assignment.slotTime}`;
        
        if (!assignments[sessionKey]) {
            console.warn(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:`, assignment);
            return;
        }
        
        if (assignments[sessionKey][assignment.roleName] === undefined) {
            console.error(`‚ùå –†–æ–ª—å "${assignment.roleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ ${sessionKey}`);
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏:', Object.keys(assignments[sessionKey]));
            return;
        }
        
        assignments[sessionKey][assignment.roleName] = assignment.participantName;
        console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${assignment.participantName} ‚Üí ${assignment.roleName} –≤ ${sessionKey}`);
    });
    
    console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Airtable:', assignmentsData.length);
}

/* === –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í AIRTABLE === */
async function saveAssignmentToAirtable(participantName, roleName, slotDate, slotTime) {
    try {
        await window.airtableService.createAssignment(participantName, roleName, slotDate, slotTime);
        console.log('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Airtable:', { participantName, roleName, slotDate, slotTime });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        throw error;
    }
}

async function removeAssignmentFromAirtable(participantName, roleName, slotDate, slotTime) {
    try {
        const assignments = await window.airtableService.getAssignments();
        const assignmentToDelete = assignments.find(a => 
            a.participantName === participantName && 
            a.roleName === roleName && 
            a.slotDate === slotDate && 
            a.slotTime === slotTime
        );
        
        if (assignmentToDelete) {
            await window.airtableService.deleteAssignment(assignmentToDelete.id);
            console.log('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Airtable:', assignmentToDelete);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        throw error;
    }
}

/* === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */
function isUserBusyInSession(sessionKey, userName) {
    const sessionTime = sessionKey.split('_')[1];
    
    for (const [checkSessionKey, sessionRoles] of Object.entries(assignments)) {
        const checkTime = checkSessionKey.split('_')[1];
        if (checkTime === sessionTime) {
            for (const assignedUser of Object.values(sessionRoles)) {
                if (assignedUser === userName) {
                    return true;
                }
            }
        }
    }
    return false;
}

function getUserRolesInSession(sessionKey, userName) {
    const [day, time] = sessionKey.split('_');
    const session = schedule[day].find(s => s.time === time);
    const sessionAssignments = assignments[sessionKey];
    
    let sessionRoles = allRoles;
    if (session.roles) {
        sessionRoles = session.roles;
    }
    
    return sessionRoles.filter(role => sessionAssignments[role] === userName);
}

async function reloadData() {
    isDataLoaded = false;
    return await loadAirtableData();
}

console.log('üì¶ Data Manager –∑–∞–≥—Ä—É–∂–µ–Ω');
