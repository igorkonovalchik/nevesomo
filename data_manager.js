// data-manager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ ES6 –º–æ–¥—É–ª–µ–π)

/* === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–ê–ù–ù–´–• === */
let participants = [];
let rolesInfo = {};
let roleGroups = {};
let schedule = {};
let allRoles = [];
let appSettings = {};
let assignments = {};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
let isDataLoaded = false;
let isDataLoading = false;

/* === –§–£–ù–ö–¶–ò–ò –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò === */
function showLoadingState() {
    const container = document.getElementById('schedule');
    if (container) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 2em; margin-bottom: 16px;">‚è≥</div>
                <div style="font-size: 1.2em; color: var(--text-secondary);">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable...</div>
            </div>
        `;
    }
}

function showErrorState(errorMessage) {
    const container = document.getElementById('schedule');
    if (container) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 2em; margin-bottom: 16px;">‚ùå</div>
                <div style="font-size: 1.2em; color: var(--error-color); margin-bottom: 16px;">
                    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                </div>
                <div style="color: var(--text-secondary); margin-bottom: 16px;">
                    ${errorMessage}
                </div>
                <button onclick="location.reload()" style="background: var(--accent-primary); color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer;">
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                </button>
            </div>
        `;
    }
}

/* === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó AIRTABLE === */
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–æ–ª–µ–π
async function loadAirtableData() {
    if (isDataLoading) return;

    // --- –û–§–õ–ê–ô–ù-–†–ï–ñ–ò–ú ---
    if (window.isOfflineMode) {
        if (window.loadOfflineData) {
            await window.loadOfflineData();
            isDataLoaded = true;
            window.dispatchEvent(new CustomEvent('dataLoaded'));
            return;
        }
    }
    // --- /–û–§–õ–ê–ô–ù-–†–ï–ñ–ò–ú ---

    isDataLoading = true;
   // showLoadingState();
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable...');
        
        if (!window.airtableService) {
            throw new Error('Airtable service –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        const data = await window.airtableService.getAllData();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants.length = 0;
        participants.push(...data.participants.map(p => ({
            id            : p.id, // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º record.id –¥–ª—è PATCH
            name          : p.name,
            telegram      : p.telegram,
            telegramId    : p.telegramId,
            isAdmin       : p.isAdmin,
            isNew       : p.isNew,
            bathExperience: p.bathExperience
        })));
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        Object.keys(rolesInfo).forEach(key => delete rolesInfo[key]);
        const validRoles = [];
        
        data.roles.forEach(role => {
            if (role.isActive && role.name) {
                rolesInfo[role.name] = {
                    icon: role.icon || 'üî•',
                    description: role.description || '',
                    instructionUrl: role.instructionUrl || '',
                    category: role.category || 'other'
                };
                validRoles.push(role.name);
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–æ–ª—å: "${role.name}" (${role.category})`);
            }
        });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å fallback
        Object.keys(roleGroups).forEach(key => delete roleGroups[key]);
        const rolesByCategory = {};
        
        // –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        data.roles.forEach(role => {
            if (role.isActive && role.name) {
                const category = role.category || 'other';
                if (!rolesByCategory[category]) {
                    rolesByCategory[category] = [];
                }
                rolesByCategory[category].push(role.name);
            }
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–µ–π –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π fallback
        if (Object.keys(rolesByCategory).length === 0) {
            console.warn('‚ö†Ô∏è –†–æ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Airtable, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            rolesByCategory.banking = ['–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä', '–ü–∞—Ä–º–∞—Å—Ç–µ—Ä 2', '–ò—Å—Ç–æ—á–Ω–∏–∫/–í–æ–¥–æ–≤–æ–∑/–¢–µ—Ö.–≥–∏–¥'];
            rolesByCategory.care = ['–ì—Ä–∏—Ç—Ç–µ—Ä 1', '–ì–æ—Å—Ç–µ–≤–∞—è –ó–∞–±–æ—Ç–∞'];
            rolesByCategory.lounge = ['–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞ - 1', '–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞+–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å'];
            rolesByCategory.kitchen = ['–ü–æ–≤–∞—Ä–µ–Ω–æ–∫'];
            rolesByCategory.other = ['–ú—É–∑—ã–∫–∞, —Ä–∏—Ç–º, –≥–æ–ª–æ—Å', '–°—Ç—Ä–∞—Ö—É—é—â–∏–π/–£—é—Ç'];
        }
        
        // –°–æ–∑–¥–∞–µ–º roleGroups —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        Object.entries(rolesByCategory).forEach(([category, roles]) => {
            const categoryNames = {
                'banking': '–ë–∞–Ω–Ω—ã–µ',
                'care': '–ó–∞–±–æ—Ç–∞',
                'lounge': '–õ–∞—É–Ω–∂',
                'kitchen': '–ö—É—Ö–Ω—è',
                'other': '–ü—Ä–æ—á–µ–µ'
            };
            
            roleGroups[category] = {
                name: categoryNames[category] || category,
                roles: roles
            };
            
            console.log(`üìÇ –ì—Ä—É–ø–ø–∞ "${categoryNames[category] || category}": ${roles.length} —Ä–æ–ª–µ–π`);
        });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: allRoles –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
        allRoles.length = 0;
        Object.values(roleGroups).forEach(group => {
            allRoles.push(...group.roles);
        });
        
        console.log(`üìã –í—Å–µ–≥–æ —Ä–æ–ª–µ–π: ${allRoles.length}`);
        console.log('üîç –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π:', allRoles);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        Object.keys(schedule).forEach(key => delete schedule[key]);
        data.schedule.forEach(session => {
            const dateKey = session.date;
            if (!schedule[dateKey]) {
                schedule[dateKey] = [];
            }
            
           // –ù–û–í–´–ô –±–ª–æ–∫ - –±–µ–∑ fallback –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π:
            schedule[dateKey].push({
                time: session.startTime,
                endTime: session.endTime,
                sessionNum: session.sessionNumber,
                status: session.status,
                type: session.type,
                availableRoles: session.availableRoles, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏–∑ –±–∞–∑—ã
                slotLink: session.slotLink || null  
            });
            
            console.log(`üìÖ –°–µ—Å—Å–∏—è ${session.startTime} ${dateKey}: —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã: "${session.availableRoles}"`);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        Object.keys(appSettings).forEach(key => delete appSettings[key]);
        Object.assign(appSettings, data.settings);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ —Ä–æ–ª–∏ –≥–æ—Ç–æ–≤—ã
        await loadAssignments(data.assignments);
        
        isDataLoaded = true;
        window.participants = participants; // –¥–ª—è telegram.js
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
            participants: participants.length,
            roles: Object.keys(rolesInfo).length,
            roleGroups: Object.keys(roleGroups).length,
            schedule: Object.keys(schedule).length,
            assignments: Object.keys(assignments).length
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
        window.dispatchEvent(new CustomEvent('dataLoaded'));
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
       // showErrorState(error.message);
        throw error;
    } finally {
        isDataLoading = false;
    }
}

async function loadAssignments(assignmentsData) {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ assignments
    Object.keys(assignments).forEach(key => delete assignments[key]);
    
    // –°–æ–∑–¥–∞–µ–º assignments —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Å—Å–∏–π —Å —Ä–æ–ª—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    Object.keys(schedule).forEach(day => {
        schedule[day].forEach(session => {
            const sessionKey = `${day}_${session.time}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–æ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            if (!session.availableRoles || !session.availableRoles.trim()) {
                console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionKey} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏ –±–µ–∑ —Ä–æ–ª–µ–π
            }
            
            // –ü–∞—Ä—Å–∏–º —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const sessionRoles = session.availableRoles.split(',').map(r => r.trim()).filter(r => r);
            
            if (sessionRoles.length === 0) {
                console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionKey} –∏–º–µ–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return;
            }
            
            console.log(`üìù –°–µ—Å—Å–∏—è ${sessionKey} —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã:`, sessionRoles);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º assignments –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            assignments[sessionKey] = {};
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            sessionRoles.forEach(role => {
                assignments[sessionKey][role] = null;
            });
        });
    });
    
    console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã assignments:', Object.keys(assignments).length, '—Å–µ—Å—Å–∏–π');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Airtable
    assignmentsData.forEach(assignment => {
        const sessionKey = `${assignment.slotDate}_${assignment.slotTime}`;
        
        if (!assignments[sessionKey]) {
            console.warn(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ assignments (–Ω–µ—Ç —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ)`);
            return;
        }
        
        if (assignments[sessionKey][assignment.roleName] === undefined) {
            console.error(`‚ùå –†–æ–ª—å "${assignment.roleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ ${sessionKey}`);
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏:', Object.keys(assignments[sessionKey]));
            return;
        }
        
        assignments[sessionKey][assignment.roleName] = assignment.participantName;
        console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${assignment.participantName} ‚Üí ${assignment.roleName} –≤ ${sessionKey}`);
    });
    
    console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Airtable:', assignmentsData.length);
}

/* === –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í AIRTABLE === */
async function saveAssignmentToAirtable(participantName, roleName, slotDate, slotTime, comment = '') {
    try {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Airtable:', { participantName, roleName, slotDate, slotTime, comment });
        
        if (!window.airtableService) {
            throw new Error('Airtable service –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        await window.airtableService.createAssignment(participantName, roleName, slotDate, slotTime, comment);
        console.log('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Airtable:', { participantName, roleName, slotDate, slotTime, comment });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        throw error;
    }
}

async function removeAssignmentFromAirtable(participantName, roleName, slotDate, slotTime) {
    try {
        const assignments = await window.airtableService.getAssignments();
        const assignmentToDelete = assignments.find(a => 
            a.participantName === participantName && 
            a.roleName === roleName && 
            a.slotDate === slotDate && 
            a.slotTime === slotTime
        );
        
        if (assignmentToDelete) {
            await window.airtableService.deleteAssignment(assignmentToDelete.id);
            console.log('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Airtable:', assignmentToDelete);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        throw error;
    }
}

/* === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò === */
function isUserBusyInSession(sessionKey, userName) {
    const sessionTime = sessionKey.split('_')[1];
    
    for (const [checkSessionKey, sessionRoles] of Object.entries(assignments)) {
        const checkTime = checkSessionKey.split('_')[1];
        if (checkTime === sessionTime) {
            for (const assignedUser of Object.values(sessionRoles)) {
                if (assignedUser === userName) {
                    return true;
                }
            }
        }
    }
    return false;
}

function getUserRolesInSession(sessionKey, userName) {
    const [day, time] = sessionKey.split('_');
    const session = schedule[day]?.find(s => s.time === time);
    
    if (!session) return [];
    
    const sessionAssignments = assignments[sessionKey];
    if (!sessionAssignments) return [];
    
    let sessionRoles = [];
    if (session.availableRoles && session.availableRoles.trim()) {
        sessionRoles = session.availableRoles.split(',').map(r => r.trim()).filter(r => r);
    } else {
        return [];
    }
    
    return sessionRoles.filter(role => sessionAssignments[role] === userName);
}

async function reloadData() {
    isDataLoaded = false;
    return await loadAirtableData();
}

console.log('üì¶ Data Manager –∑–∞–≥—Ä—É–∂–µ–Ω');

