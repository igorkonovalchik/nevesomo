/**
 * NEVESOMO –®–∏—Ñ—Ç—ã 2025 - –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
 * @author Igor Konovalchik
 * @version 2.0
 */

// ============================================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–ê–ù–ù–´–•
// ============================================================================

/** @type {Array<Object>} –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */
let participants = [];

/** @type {Object.<string, Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö */
let rolesInfo = {};

/** @type {Object.<string, Object>} –ì—Ä—É–ø–ø—ã —Ä–æ–ª–µ–π */
let roleGroups = {};

/** @type {Object.<string, Array>} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π */
let schedule = {};

/** @type {Array<string>} –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ */
let allRoles = [];

/** @type {Object} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
let appSettings = {};

/** @type {Object.<string, Object>} –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ä–æ–ª–∏ */
let assignments = {};

// ============================================================================
// –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò
// ============================================================================

/** @type {boolean} –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö */
let isDataLoaded = false;

/** @type {boolean} –§–ª–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */
let isDataLoading = false;

// ============================================================================
// –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================

const ROLE_CATEGORIES = {
    BANKING: 'banking',
    CARE: 'care',
    LOUNGE: 'lounge',
    KITCHEN: 'kitchen',
    OTHER: 'other'
};

const CATEGORY_NAMES = {
    [ROLE_CATEGORIES.BANKING]: '–ë–∞–Ω–Ω—ã–µ',
    [ROLE_CATEGORIES.CARE]: '–ó–∞–±–æ—Ç–∞',
    [ROLE_CATEGORIES.LOUNGE]: '–õ–∞—É–Ω–∂',
    [ROLE_CATEGORIES.KITCHEN]: '–ö—É—Ö–Ω—è',
    [ROLE_CATEGORIES.OTHER]: '–ü—Ä–æ—á–µ–µ'
};

const FALLBACK_ROLES = {
    [ROLE_CATEGORIES.BANKING]: ['–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä', '–ü–∞—Ä–º–∞—Å—Ç–µ—Ä 2', '–ò—Å—Ç–æ—á–Ω–∏–∫/–í–æ–¥–æ–≤–æ–∑/–¢–µ—Ö.–≥–∏–¥'],
    [ROLE_CATEGORIES.CARE]: ['–ì—Ä–∏—Ç—Ç–µ—Ä 1', '–ì–æ—Å—Ç–µ–≤–∞—è –ó–∞–±–æ—Ç–∞'],
    [ROLE_CATEGORIES.LOUNGE]: ['–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞ - 1', '–õ—é–±–æ–≤—å+–ó–∞–±–æ—Ç–∞+–ú–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å'],
    [ROLE_CATEGORIES.KITCHEN]: ['–ü–æ–≤–∞—Ä–µ–Ω–æ–∫'],
    [ROLE_CATEGORIES.OTHER]: ['–ú—É–∑—ã–∫–∞, —Ä–∏—Ç–º, –≥–æ–ª–æ—Å', '–°—Ç—Ä–∞—Ö—É—é—â–∏–π/–£—é—Ç']
};

// ============================================================================
// –§–£–ù–ö–¶–ò–ò –°–û–°–¢–û–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò
// ============================================================================

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingState() {
    const container = document.getElementById('schedule');
    if (!container) return;
    
    container.innerHTML = `
        <div style="text-align: center; padding: 40px;">
            <div style="font-size: 2em; margin-bottom: 16px;">‚è≥</div>
            <div style="font-size: 1.2em; color: var(--text-secondary);">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable...</div>
        </div>
    `;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
 * @param {string} errorMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
function showErrorState(errorMessage) {
    const container = document.getElementById('schedule');
    if (!container) return;
    
    container.innerHTML = `
        <div style="text-align: center; padding: 40px;">
            <div style="font-size: 2em; margin-bottom: 16px;">‚ùå</div>
            <div style="font-size: 1.2em; color: var(--error-color); margin-bottom: 16px;">
                –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            </div>
            <div style="color: var(--text-secondary); margin-bottom: 16px;">
                ${errorMessage}
            </div>
            <button onclick="location.reload()" style="background: var(--accent-primary); color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer;">
                –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            </button>
        </div>
    `;
}

// ============================================================================
// –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó AIRTABLE
// ============================================================================

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable
 * @async
 * @returns {Promise<void>}
 */
async function loadAirtableData() {
    if (isDataLoading) return;
    
    isDataLoading = true;
    
    try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Airtable...');
        
        if (!window.airtableService) {
            throw new Error('Airtable service –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
        
        const data = await window.airtableService.getAllData();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        processParticipants(data.participants);
        processRoles(data.roles);
        processSchedule(data.schedule);
        processSettings(data.settings);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ —Ä–æ–ª–∏ –≥–æ—Ç–æ–≤—ã
        await loadAssignments(data.assignments);
        
        isDataLoaded = true;
        window.participants = participants; // –¥–ª—è telegram.js
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
            participants: participants.length,
            roles: Object.keys(rolesInfo).length,
            roleGroups: Object.keys(roleGroups).length,
            schedule: Object.keys(schedule).length,
            assignments: Object.keys(assignments).length
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
        window.dispatchEvent(new CustomEvent('dataLoaded'));
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    } finally {
        isDataLoading = false;
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @param {Array<Object>} participantsData - –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
function processParticipants(participantsData) {
    participants.length = 0;
    participants.push(...participantsData.map(p => ({
        name: p.name,
        telegram: p.telegram,
        telegramId: p.telegramId,
        isAdmin: p.isAdmin,
        bathExperience: p.bathExperience
    })));
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–µ–π
 * @param {Array<Object>} rolesData - –î–∞–Ω–Ω—ã–µ —Ä–æ–ª–µ–π
 */
function processRoles(rolesData) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏
    Object.keys(rolesInfo).forEach(key => delete rolesInfo[key]);
    
    const validRoles = [];
    
    rolesData.forEach(role => {
        if (role.isActive && role.name) {
            rolesInfo[role.name] = {
                icon: role.icon || 'üî•',
                description: role.description || '',
                instructionUrl: role.instructionUrl || '',
                category: role.category || ROLE_CATEGORIES.OTHER
            };
            validRoles.push(role.name);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–æ–ª—å: "${role.name}" (${role.category})`);
        }
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    createRoleGroups(rolesData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
    updateAllRoles();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—ã —Ä–æ–ª–µ–π
 * @param {Array<Object>} rolesData - –î–∞–Ω–Ω—ã–µ —Ä–æ–ª–µ–π
 */
function createRoleGroups(rolesData) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã
    Object.keys(roleGroups).forEach(key => delete roleGroups[key]);
    
    const rolesByCategory = {};
    
    // –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    rolesData.forEach(role => {
        if (role.isActive && role.name) {
            const category = role.category || ROLE_CATEGORIES.OTHER;
            if (!rolesByCategory[category]) {
                rolesByCategory[category] = [];
            }
            rolesByCategory[category].push(role.name);
        }
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–ª–µ–π –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π fallback
    if (Object.keys(rolesByCategory).length === 0) {
        console.warn('‚ö†Ô∏è –†–æ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Airtable, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        Object.assign(rolesByCategory, FALLBACK_ROLES);
    }
    
    // –°–æ–∑–¥–∞–µ–º roleGroups —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    Object.entries(rolesByCategory).forEach(([category, roles]) => {
        roleGroups[category] = {
            name: CATEGORY_NAMES[category] || category,
            roles: roles
        };
        
        console.log(`üìÇ –ì—Ä—É–ø–ø–∞ "${CATEGORY_NAMES[category] || category}": ${roles.length} —Ä–æ–ª–µ–π`);
    });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
 */
function updateAllRoles() {
    allRoles.length = 0;
    Object.values(roleGroups).forEach(group => {
        allRoles.push(...group.roles);
    });
    
    console.log(`üìã –í—Å–µ–≥–æ —Ä–æ–ª–µ–π: ${allRoles.length}`);
    console.log('üîç –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π:', allRoles);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 * @param {Array<Object>} scheduleData - –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
 */
function processSchedule(scheduleData) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    Object.keys(schedule).forEach(key => delete schedule[key]);
    
    scheduleData.forEach(session => {
        const dateKey = session.date;
        if (!schedule[dateKey]) {
            schedule[dateKey] = [];
        }
        
        schedule[dateKey].push({
            time: session.startTime,
            endTime: session.endTime,
            sessionNum: session.sessionNumber,
            status: session.status,
            type: session.type,
            availableRoles: session.availableRoles,
            slotLink: session.slotLink || null
        });
        
        console.log(`üìÖ –°–µ—Å—Å–∏—è ${session.startTime} ${dateKey}: —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã: "${session.availableRoles}"`);
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Object} settingsData - –î–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function processSettings(settingsData) {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    Object.keys(appSettings).forEach(key => delete appSettings[key]);
    Object.assign(appSettings, settingsData);
}

// ============================================================================
// –ó–ê–ì–†–£–ó–ö–ê –ù–ê–ó–ù–ê–ß–ï–ù–ò–ô
// ============================================================================

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * @param {Array<Object>} assignmentsData - –î–∞–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
 * @async
 * @returns {Promise<void>}
 */
async function loadAssignments(assignmentsData) {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ assignments
    Object.keys(assignments).forEach(key => delete assignments[key]);
    
    if (!assignmentsData || assignmentsData.length === 0) {
        console.log('üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã');
        initializeEmptyAssignments();
        return;
    }
    
    console.log(`üìù –ó–∞–≥—Ä—É–∂–∞–µ–º ${assignmentsData.length} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π...`);
    
    assignmentsData.forEach(assignment => {
        const sessionKey = `${assignment.slotDate}_${assignment.slotTime}`;
        
        if (!assignments[sessionKey]) {
            assignments[sessionKey] = {};
        }
        
        assignments[sessionKey][assignment.roleName] = assignment.participantName;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (assignment.comment) {
            if (!window.assignmentComments) window.assignmentComments = {};
            if (!window.assignmentComments[sessionKey]) window.assignmentComments[sessionKey] = {};
            window.assignmentComments[sessionKey][assignment.roleName] = {
                comment: assignment.comment
            };
        }
    });
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(assignments).length} —Å–µ—Å—Å–∏–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏`);
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
 */
function initializeEmptyAssignments() {
    Object.keys(schedule).forEach(day => {
        schedule[day].forEach(session => {
            const sessionKey = `${day}_${session.time}`;
            assignments[sessionKey] = {};
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
            allRoles.forEach(role => {
                assignments[sessionKey][role] = null;
            });
        });
    });
}

// ============================================================================
// –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–ó–ù–ê–ß–ï–ù–ò–ô
// ============================================================================

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ Airtable
 * @param {string} participantName - –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * @param {string} roleName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
 * @param {string} slotDate - –î–∞—Ç–∞ —Å–ª–æ—Ç–∞
 * @param {string} slotTime - –í—Ä–µ–º—è —Å–ª–æ—Ç–∞
 * @param {string} comment - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 * @async
 * @returns {Promise<void>}
 */
async function saveAssignmentToAirtable(participantName, roleName, slotDate, slotTime, comment = '') {
    try {
        await window.airtableService.createAssignment({
            participantName,
            roleName,
            slotDate,
            slotTime,
            comment
        });
        
        console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${participantName} -> ${roleName} (${slotDate} ${slotTime})`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        throw error;
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Airtable
 * @param {string} participantName - –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
 * @param {string} roleName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
 * @param {string} slotDate - –î–∞—Ç–∞ —Å–ª–æ—Ç–∞
 * @param {string} slotTime - –í—Ä–µ–º—è —Å–ª–æ—Ç–∞
 * @async
 * @returns {Promise<void>}
 */
async function removeAssignmentFromAirtable(participantName, roleName, slotDate, slotTime) {
    try {
        const assignments = await window.airtableService.getAssignments();
        const assignment = assignments.find(a => 
            a.participantName === participantName && 
            a.roleName === roleName && 
            a.slotDate === slotDate && 
            a.slotTime === slotTime
        );
        
        if (assignment) {
            await window.airtableService.deleteAssignment(assignment.id);
            console.log(`‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${participantName} -> ${roleName} (${slotDate} ${slotTime})`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', error);
        throw error;
    }
}

// ============================================================================
// –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò
// ============================================================================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏
 * @param {string} sessionKey - –ö–ª—é—á —Å–µ—Å—Å–∏–∏
 * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç
 */
function isUserBusyInSession(sessionKey, userName) {
    const sessionAssignments = assignments[sessionKey];
    if (!sessionAssignments) return false;
    
    return Object.values(sessionAssignments).some(assignedUser => 
        assignedUser === userName
    );
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
 * @param {string} sessionKey - –ö–ª—é—á —Å–µ—Å—Å–∏–∏
 * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getUserRolesInSession(sessionKey, userName) {
    const sessionAssignments = assignments[sessionKey];
    if (!sessionAssignments) return [];
    
    return Object.entries(sessionAssignments)
        .filter(([role, assignedUser]) => assignedUser === userName)
        .map(([role]) => role);
}

// ============================================================================
// –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
// ============================================================================

/**
 * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
 * @async
 * @returns {Promise<void>}
 */
async function reloadData() {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    isDataLoaded = false;
    isDataLoading = false;
    
    try {
        await loadAirtableData();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

// ============================================================================
// –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
// ============================================================================

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.loadAirtableData = loadAirtableData;
window.reloadData = reloadData;
window.saveAssignmentToAirtable = saveAssignmentToAirtable;
window.removeAssignmentFromAirtable = removeAssignmentFromAirtable;
window.isUserBusyInSession = isUserBusyInSession;
window.getUserRolesInSession = getUserRolesInSession;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
window.participants = participants;
window.rolesInfo = rolesInfo;
window.roleGroups = roleGroups;
window.schedule = schedule;
window.allRoles = allRoles;
window.appSettings = appSettings;
window.assignments = assignments;
window.isDataLoaded = isDataLoaded;

